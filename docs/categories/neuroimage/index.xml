<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NeuroImage on Sang Feng | 桑峰</title>
    <link>/categories/neuroimage/</link>
    <description>Recent content in NeuroImage on Sang Feng | 桑峰</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Jul 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="/categories/neuroimage/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>配准方法示例</title>
      <link>/post/2022/07/07/blog/</link>
      <pubDate>Thu, 07 Jul 2022 00:00:00 +0000</pubDate>
      <guid>/post/2022/07/07/blog/</guid>
      <description>&lt;p&gt;配准可以把不同空间中的脑影像进行对齐。典型地，在下面场景中就需要用到配准。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;我们有一个在b空间中（例如，MNI152）的感兴趣区，可我们想的到a空间（例如，个体空间）上感兴趣区中的脑指标。大致的思路是，将b空间中的脑图像和a空间中的脑图像进行配准并保存配准的转换参数。之后将转换参数应用到b空间的感兴趣区图像上就能得到a空间中的感兴趣区图像了。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;下面尝试用几种方法实现上述步骤。说明，b.nii.gz和roi.nii.gz都是在b空间中的图像，后者是感兴趣区。目的是的到a空间中的感兴趣区。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ants&#34;&gt;ANTs&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;antsRegistrationSyNQuick.sh \&#xA;    -d 3 \&#xA;    -f a.nii.gz \&#xA;    -m b.nii.gz \&#xA;    -o b_space-a&#xA;&#xA;&#xA;antsApplyTransforms -d 3 \&#xA;    -i roi.nii.gz \&#xA;    -r a.nii.gz \&#xA;    -t b_space-a0GenericAffine.mat \&#xA;    -t b_space-a1Warp.nii.gz \&#xA;    -o roi_space-a.nii.gz&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;fsl&#34;&gt;fsl&lt;/h2&gt;&#xA;&lt;p&gt;fsl在配准的时候通常要经过线性和非线性配准，用到的命令分别是flirt和fnirt。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flirt -ref a.nii.gz \&#xA;  -in b.nii.gz \&#xA;  -omat b2a_linWarp.mat \&#xA;  -v&#xA;&#xA;# 很慢&#xA;fnirt --ref=a.nii.gz \&#xA;  --in=b.nii.gz \&#xA;  --aff=b2a_linWarp.mat \&#xA;  --cout=b2a_nlinWarp \&#xA;  --verbose&#xA;&#xA;applywarp --ref=a.nii.gz \&#xA;  --in=roi.nii.gz \&#xA;  --warp=b2a_nlinWarp.nii.gz \&#xA;  --out=roi_space-a.nii.gz \&#xA;  -v&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;其他一些有用的命令：&lt;/p&gt;</description>
    </item>
    <item>
      <title>CIFTI文件的读取和可视化</title>
      <link>/post/2022/02/22/blog/</link>
      <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
      <guid>/post/2022/02/22/blog/</guid>
      <description>&lt;p&gt;CIFTI (Connectivity Informatics Technology Initiative) 是HCP项目中开发的神经影像存储格式。具体可参考2016年Glasser等人发表的文章(Glasser et al., Nature neuroscience, 2015)。开发者在GitHub上提供了读写的MATLAB工具包，可在此处下载：https://github.com/Washington-University/cifti-matlab。&lt;/p&gt;</description>
    </item>
    <item>
      <title>下载templateflow</title>
      <link>/post/2022/02/18/blog/</link>
      <pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate>
      <guid>/post/2022/02/18/blog/</guid>
      <description>&lt;p&gt;templateflow中包含了一些典型的神经影像脑模版，可在fmriprep等工具中使用。本文主要介绍如何下载templateflow。&lt;/p&gt;&#xA;&lt;h1 id=&#34;准备&#34;&gt;准备&lt;/h1&gt;&#xA;&lt;p&gt;GitHub上有它的仓库，但是那只是DataLab的索引，因此直接下载是不能下载到模版文件的。需要通过DataLab下载。&lt;/p&gt;&#xA;&lt;p&gt;首先，安装DataLab（以Ubuntu 21.10为例）。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda install -c conda-forge datalad&#xA;# OR&#xA;sudo apt-get install datalab&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;下载&#34;&gt;下载&lt;/h1&gt;&#xA;&lt;p&gt;下载索引文件，并使用DataLab下载模版。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/templateflow/templateflow.git&#xA;cd templateflow&#xA;# tpl-* 下载所有模版&#xA;datalad get -r tpl-fsLR&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;通过python下载&#34;&gt;通过python下载&lt;/h1&gt;&#xA;&lt;p&gt;笔者在使用datalad下载过程中，会经常遇到进度条长时间不动的情况。而且印象当中，笔者以前用python下载成功过，速度也不是很慢。因此这里将python下载templateflow的方法也追加进来。&lt;/p&gt;&#xA;&lt;p&gt;首先设置环境变量。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export TEMPLATEFLOW_HOME=$HOME/.templateflow&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;使用pip安装templateflow包。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m pip install -U templateflow&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;下载templateflow。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -c &amp;quot;from templateflow.api import get; get([&#39;MNI152NLin2009cAsym&#39;, &#39;MNI152NLin6Asym&#39;, &#39;OASIS30ANTs&#39;, &#39;MNIPediatricAsym&#39;, &#39;MNIInfant&#39;])&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;这里可以根据需要下载相应的模版文件。&lt;/p&gt;&#xA;&lt;h1 id=&#34;相关链接&#34;&gt;相关链接&lt;/h1&gt;&#xA;&lt;p&gt;templateflow项目地址：https://github.com/templateflow/&lt;/p&gt;&#xA;&lt;p&gt;DataLad网址：https://www.datalad.org/&lt;/p&gt;&#xA;&lt;p&gt;python下载参考网址：https://fmriprep.org/en/1.5.9/spaces.html&lt;/p&gt;</description>
    </item>
    <item>
      <title>Find clusters in a image</title>
      <link>/post/2022/01/19/blog/</link>
      <pubDate>Wed, 19 Jan 2022 00:00:00 +0000</pubDate>
      <guid>/post/2022/01/19/blog/</guid>
      <description>&lt;h1 id=&#34;问题&#34;&gt;问题&lt;/h1&gt;&#xA;&lt;p&gt;我们在对神经影像数据做完统计后（例如ICA），会得到相应的mask二值文件。但是有些情况下，我们还需要进一步对mask中每一个cluster进行分析（例如计算mask中每个cluster之间的功能连接）。所以我们需要从mask文件中得到每一个cluster。由于没有想到有哪个现成的工具包可以解决上述的问题。因此，本文试图用自己的方式去解决上述的问题。&lt;/p&gt;&#xA;&lt;h1 id=&#34;方法&#34;&gt;方法&lt;/h1&gt;&#xA;&lt;h2 id=&#34;思路一&#34;&gt;思路一&lt;/h2&gt;&#xA;&lt;p&gt;看到这个问题的时候，最朴素的想法就是用MRIcron/GL或者ITK-SNAP手动将mask中的每一个cluster标记出来。&lt;/p&gt;&#xA;&lt;h2 id=&#34;思路二&#34;&gt;思路二&lt;/h2&gt;&#xA;&lt;p&gt;虽然上述手动标记的方法能解决这个问题，但是显得没那么优雅（bushi。就想换用代码解决这个问题。而且写完代码下次再碰到类似的问题，就能直接使用了（还能水一篇推送。&lt;/p&gt;&#xA;&lt;p&gt;首先我想着先找出mask中所有非零元素的下标，然后选一个非零元素，再去判断这个元素的邻域是否是0（如果是0就意味着已经到了这个cluster的边缘）。但是在三维图像里面，要判断邻域是否到达边缘，需要写8个条件判断，这也很不优雅（主要还是找到了一个现成的轮子。&lt;/p&gt;&#xA;&lt;p&gt;之后在找“轮子”的时候，看到了scipy包里面的一个函数可以实现上面的过程。因此通过调用它近乎完美地解决了最开始的问题（bushi。下面是相应的代码。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import nibabel as nib&#xA;from scipy.ndimage import measurements&#xA;import logging&#xA;logging.basicConfig(level=logging.INFO)&#xA;&#xA;img = nib.load(&#39;test-binary.nii&#39;)&#xA;data = img.get_fdata()&#xA;labels, num_labels = measurements.label(data)&#xA;logging.info(f&#39;The number of cluster is {num_labels}&#39;)&#xA;nib.save(nib.Nifti1Image(labels, img.affine), f&#39;test_cluster-mix.nii&#39;)&#xA;for i in range(num_labels):&#xA;    tmp_data = np.zeros(data.shape)&#xA;    tmp_data[labels == i + 1] = 1&#xA;    nib.save(nib.Nifti1Image(tmp_data, img.affine), f&#39;test_cluster-{i+1}.nii&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;test-binary.nii是从Neurosynth上随便找的一个功能连接图谱，并以±0.2作为阈值得到的mask文件（Figure 1）。&lt;/p&gt;&#xA;&lt;div class=&#34;figure&#34;&gt;&#xA;&lt;img src=&#34;./img/fig-1.png&#34; alt=&#34;test-binary.nii可视化结果。&#34;  /&gt;&#xA;&lt;p class=&#34;caption&#34;&gt;&lt;span id=&#34;fig:unnamed-chunk-1&#34;&gt;&lt;/span&gt;Figure 1: test-binary.nii可视化结果。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;上述代码运行后，对于mask中的每一个cluster会得到一个.nii文件，同时也会得到一个混合了所有cluster的.nii文件。结果如Figure 2所示。&lt;/p&gt;&#xA;&lt;div class=&#34;figure&#34;&gt;&#xA;&lt;img src=&#34;./img/fig-2.png&#34; alt=&#34;混合了所有cluster的结果，其中每个cluster用一个整数标记。&#34;  /&gt;&#xA;&lt;p class=&#34;caption&#34;&gt;&lt;span id=&#34;fig:unnamed-chunk-2&#34;&gt;&lt;/span&gt;Figure 2: 混合了所有cluster的结果，其中每个cluster用一个整数标记。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://neurosynth.org/locations/-4_24_46_6&#34;&gt;https://neurosynth.org/locations/-4_24_46_6&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/52087533/how-to-find-number-of-clusters-in-a-image/52088840&#34;&gt;https://stackoverflow.com/questions/52087533/how-to-find-number-of-clusters-in-a-image/52088840&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
