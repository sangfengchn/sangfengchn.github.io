<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程 on Sang Feng | 桑峰</title>
    <link>/categories/%E7%BC%96%E7%A8%8B/</link>
    <description>Recent content in 编程 on Sang Feng | 桑峰</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Apr 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="/categories/%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>R语言中的异常处理：TryCatch</title>
      <link>/post/2024/04/08/trycatchinr/</link>
      <pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate>
      <guid>/post/2024/04/08/trycatchinr/</guid>
      <description>&lt;p&gt;因为需要在循环里面记录警告和报错对应的循环项。一开始的思路是用&lt;code&gt;warnings()&lt;/code&gt;获取警告信息，在获取后再用&lt;code&gt;warning(&#39;&#39;)&lt;/code&gt;清空警告信息。但在循环结束后，获取警告信息回返回包含多个元素的&lt;code&gt;list&lt;/code&gt;，似乎清空警告信息没有生效。另外，这种方法没办法处理报错。第二种尝试是使用&lt;code&gt;tryCatch()&lt;/code&gt;，虽然详细的原理还没弄明白，但目前也能实现一开始的需要了。因此记录一下。&lt;/p&gt;&#xA;&lt;h3 id=&#34;trycatch&#34;&gt;tryCatch&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# create a function maybe raise warning or error.&#xA;func &amp;lt;- function(x) {&#xA;  if (x %% 2 == 0) {&#xA;    warning(&#39;a&#39;)&#xA;  } else if (x %% 3 == 0) {&#xA;    stop(&#39;b&#39;)&#xA;  }&#xA;}&#xA;&#xA;# the loop&#xA;for (i in 1:10) {&#xA;  res &amp;lt;- tryCatch({&#xA;    func(i)&#xA;    print(&#39;Normal&#39;)&#xA;    &#39;Normal&#39;&#xA;    }, &#xA;    warning = function(w){&#xA;      priint(&#39;Warning&#39;)&#xA;     &#39;Warning&#39;&#xA;     }, &#xA;   error = function(e){&#xA;     print(&#39;Error&#39;)&#xA;     &#39;Error&#39;&#xA;     },&#xA;   finally = {&#xA;     print(&#39;Finally&#39;)&#xA;   })&#xA;  print(sprintf(&#39;x: %d, res: %s&#39;, i, res))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Normal&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 1, res: Normal&amp;quot;&#xA;## [1] &amp;quot;Error&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 2, res: Error&amp;quot;&#xA;## [1] &amp;quot;Error&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 3, res: Error&amp;quot;&#xA;## [1] &amp;quot;Error&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 4, res: Error&amp;quot;&#xA;## [1] &amp;quot;Normal&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 5, res: Normal&amp;quot;&#xA;## [1] &amp;quot;Error&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 6, res: Error&amp;quot;&#xA;## [1] &amp;quot;Normal&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 7, res: Normal&amp;quot;&#xA;## [1] &amp;quot;Error&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 8, res: Error&amp;quot;&#xA;## [1] &amp;quot;Error&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 9, res: Error&amp;quot;&#xA;## [1] &amp;quot;Error&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 10, res: Error&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;观察输出，可以推测，先执行&lt;code&gt;func(i)&lt;/code&gt;，如果没有异常和报错，执行之后的代码。并在&lt;code&gt;tryCatch()&lt;/code&gt;结束前执行&lt;strong&gt;finally&lt;/strong&gt;；如果有异常或者报错，则直接执行对应的代码，并在&lt;code&gt;tryCatch()&lt;/code&gt;结束前执行&lt;strong&gt;finally&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
