<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Sang Feng | 桑峰</title>
    <link>/</link>
    <description>Recent content in Home on Sang Feng | 桑峰</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Apr 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>R语言中的异常处理：TryCatch</title>
      <link>/post/2024/04/08/trycatchinr/</link>
      <pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate>
      <guid>/post/2024/04/08/trycatchinr/</guid>
      <description>&lt;p&gt;因为需要在循环里面记录警告和报错对应的循环项。一开始的思路是用&lt;code&gt;warnings()&lt;/code&gt;获取警告信息，在获取后再用&lt;code&gt;warning(&#39;&#39;)&lt;/code&gt;清空警告信息。但在循环结束后，获取警告信息回返回包含多个元素的&lt;code&gt;list&lt;/code&gt;，似乎清空警告信息没有生效。另外，这种方法没办法处理报错。第二种尝试是使用&lt;code&gt;tryCatch()&lt;/code&gt;，虽然详细的原理还没弄明白，但目前也能实现一开始的需要了。因此记录一下。&lt;/p&gt;&#xA;&lt;h3 id=&#34;trycatch&#34;&gt;tryCatch&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# create a function maybe raise warning or error.&#xA;func &amp;lt;- function(x) {&#xA;  if (x %% 2 == 0) {&#xA;    warning(&#39;a&#39;)&#xA;  } else if (x %% 3 == 0) {&#xA;    stop(&#39;b&#39;)&#xA;  }&#xA;}&#xA;&#xA;# the loop&#xA;for (i in 1:10) {&#xA;  res &amp;lt;- tryCatch({&#xA;    func(i)&#xA;    print(&#39;Normal&#39;)&#xA;    &#39;Normal&#39;&#xA;    }, &#xA;    warning = function(w){&#xA;      priint(&#39;Warning&#39;)&#xA;     &#39;Warning&#39;&#xA;     }, &#xA;   error = function(e){&#xA;     print(&#39;Error&#39;)&#xA;     &#39;Error&#39;&#xA;     },&#xA;   finally = {&#xA;     print(&#39;Finally&#39;)&#xA;   })&#xA;  print(sprintf(&#39;x: %d, res: %s&#39;, i, res))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Normal&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 1, res: Normal&amp;quot;&#xA;## [1] &amp;quot;Error&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 2, res: Error&amp;quot;&#xA;## [1] &amp;quot;Error&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 3, res: Error&amp;quot;&#xA;## [1] &amp;quot;Error&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 4, res: Error&amp;quot;&#xA;## [1] &amp;quot;Normal&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 5, res: Normal&amp;quot;&#xA;## [1] &amp;quot;Error&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 6, res: Error&amp;quot;&#xA;## [1] &amp;quot;Normal&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 7, res: Normal&amp;quot;&#xA;## [1] &amp;quot;Error&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 8, res: Error&amp;quot;&#xA;## [1] &amp;quot;Error&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 9, res: Error&amp;quot;&#xA;## [1] &amp;quot;Error&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 10, res: Error&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;观察输出，可以推测，先执行&lt;code&gt;func(i)&lt;/code&gt;，如果没有异常和报错，执行之后的代码。并在&lt;code&gt;tryCatch()&lt;/code&gt;结束前执行&lt;strong&gt;finally&lt;/strong&gt;；如果有异常或者报错，则直接执行对应的代码，并在&lt;code&gt;tryCatch()&lt;/code&gt;结束前执行&lt;strong&gt;finally&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>R包安装报错</title>
      <link>/post/2022/09/09/blog/</link>
      <pubDate>Fri, 09 Sep 2022 00:00:00 +0000</pubDate>
      <guid>/post/2022/09/09/blog/</guid>
      <description>&lt;h1 id=&#34;error-c14-standard-requested-but-cxx14-is-not-defined&#34;&gt;Error: C++14 standard requested but CXX14 is not defined&lt;/h1&gt;&#xA;&lt;p&gt;参考：https://www.zxzyl.com/archives/1283/&lt;/p&gt;&#xA;&lt;p&gt;升级gcc，并设置r包编译使用的gcc路径。&lt;/p&gt;&#xA;&lt;p&gt;设置方法：&lt;/p&gt;&#xA;&lt;p&gt;首先在～/.R目录下新建文件Makevars；&lt;/p&gt;&#xA;&lt;p&gt;将&lt;/p&gt;</description>
    </item>
    <item>
      <title>笔记-RMarkdown和ggplot2</title>
      <link>/post/2022/07/10/blog/</link>
      <pubDate>Sun, 10 Jul 2022 00:00:00 +0000</pubDate>
      <guid>/post/2022/07/10/blog/</guid>
      <description>&lt;h1 id=&#34;r-markdown图表交叉引用&#34;&gt;R Markdown图表交叉引用&lt;/h1&gt;&#xA;&lt;p&gt;在R Markdown中给图表添加引用是首先需要在文件的输出格式设置为以下三种之一。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;output:&#xA;  # bookdown::word_document2: default&#xA;  bookdown::html_document2: default&#xA;  # bookdown::pdf_document2: default&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;其次在绘制图表时需要添加标签，如下图&lt;a href=&#34;#fig:fig-demo&#34;&gt;1&lt;/a&gt;所示：&lt;/p&gt;&#xA;&lt;div class=&#34;figure&#34;&gt;&#xA;&lt;img src=&#34;./img/demo.png&#34; alt=&#34;这是一个示例。&#34;  /&gt;&#xA;&lt;p class=&#34;caption&#34;&gt;&lt;span id=&#34;fig:fig-demo&#34;&gt;&lt;/span&gt;Figure 1: 这是一个示例。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;其中fig-demo为图片的标签。在文中引用时，输入**&amp;lt;a href=&amp;quot;#fig:fig-demo&amp;quot;&amp;gt;1&lt;/a&gt;**即可自动添加图片引用。&lt;/p&gt;&#xA;&lt;h1 id=&#34;ggplot2添加标签&#34;&gt;ggplot2添加标签&lt;/h1&gt;&#xA;&lt;h2 id=&#34;修改坐标轴端点样式&#34;&gt;修改坐标轴端点样式&lt;/h2&gt;&#xA;&lt;p&gt;坐标轴端点样式可以通过如下命令修改，下图&lt;a href=&#34;#fig:fig-round&#34;&gt;2&lt;/a&gt;、图&lt;a href=&#34;#fig:fig-butt&#34;&gt;3&lt;/a&gt;和图&lt;a href=&#34;#fig:fig-square&#34;&gt;4&lt;/a&gt;分别是三种端点样式的是示例图。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;theme(axis.line = element_line(lineend=&#39;round&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;div class=&#34;figure&#34;&gt;&#xA;&lt;img src=&#34;./img/demo-round.png&#34; alt=&#34;这是round。&#34;  /&gt;&#xA;&lt;p class=&#34;caption&#34;&gt;&lt;span id=&#34;fig:fig-round&#34;&gt;&lt;/span&gt;Figure 2: 这是round。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;figure&#34;&gt;&#xA;&lt;img src=&#34;./img/demo-butt.png&#34; alt=&#34;这是butt。&#34;  /&gt;&#xA;&lt;p class=&#34;caption&#34;&gt;&lt;span id=&#34;fig:fig-butt&#34;&gt;&lt;/span&gt;Figure 3: 这是butt。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;figure&#34;&gt;&#xA;&lt;img src=&#34;./img/demo-square.png&#34; alt=&#34;这是square。&#34;  /&gt;&#xA;&lt;p class=&#34;caption&#34;&gt;&lt;span id=&#34;fig:fig-square&#34;&gt;&lt;/span&gt;Figure 4: 这是square。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2 id=&#34;给柱状图添加标签&#34;&gt;给柱状图添加标签&lt;/h2&gt;&#xA;&lt;p&gt;给柱状图每个柱子添加相应的数字标签可以通过geom_text函数完成，显示效果如图&lt;a href=&#34;#fig:fig-label&#34;&gt;5&lt;/a&gt;所示。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tmpData %&amp;gt;%&#xA;  count(MRIAGE_group, Sex) %&amp;gt;%&#xA;  ggplot(aes(x = MRIAGE_group, y = n, fill = Sex, label = n)) +&#xA;  geom_bar(stat = &#39;identity&#39;, position = position_dodge()) +&#xA;  geom_text(position = position_dodge(width = 0.9), vjust = -0.1) +&#xA;  labs(x = &#39;Age&#39;, y = &#39;Number&#39;) +&#xA;  theme_classic(base_size = 20) +&#xA;  theme(&#xA;    axis.line = element_line(lineend=&#39;round&#39;),&#xA;    axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.6))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;div class=&#34;figure&#34;&gt;&#xA;&lt;img src=&#34;./img/demo-label.png&#34; alt=&#34;柱状图标签。&#34;  /&gt;&#xA;&lt;p class=&#34;caption&#34;&gt;&lt;span id=&#34;fig:fig-label&#34;&gt;&lt;/span&gt;Figure 5: 柱状图标签。&lt;/p&gt;</description>
    </item>
    <item>
      <title>配准方法示例</title>
      <link>/post/2022/07/07/blog/</link>
      <pubDate>Thu, 07 Jul 2022 00:00:00 +0000</pubDate>
      <guid>/post/2022/07/07/blog/</guid>
      <description>&lt;p&gt;配准可以把不同空间中的脑影像进行对齐。典型地，在下面场景中就需要用到配准。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;我们有一个在b空间中（例如，MNI152）的感兴趣区，可我们想的到a空间（例如，个体空间）上感兴趣区中的脑指标。大致的思路是，将b空间中的脑图像和a空间中的脑图像进行配准并保存配准的转换参数。之后将转换参数应用到b空间的感兴趣区图像上就能得到a空间中的感兴趣区图像了。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;下面尝试用几种方法实现上述步骤。说明，b.nii.gz和roi.nii.gz都是在b空间中的图像，后者是感兴趣区。目的是的到a空间中的感兴趣区。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ants&#34;&gt;ANTs&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;antsRegistrationSyNQuick.sh \&#xA;    -d 3 \&#xA;    -f a.nii.gz \&#xA;    -m b.nii.gz \&#xA;    -o b_space-a&#xA;&#xA;&#xA;antsApplyTransforms -d 3 \&#xA;    -i roi.nii.gz \&#xA;    -r a.nii.gz \&#xA;    -t b_space-a0GenericAffine.mat \&#xA;    -t b_space-a1Warp.nii.gz \&#xA;    -o roi_space-a.nii.gz&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;fsl&#34;&gt;fsl&lt;/h2&gt;&#xA;&lt;p&gt;fsl在配准的时候通常要经过线性和非线性配准，用到的命令分别是flirt和fnirt。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flirt -ref a.nii.gz \&#xA;  -in b.nii.gz \&#xA;  -omat b2a_linWarp.mat \&#xA;  -v&#xA;&#xA;# 很慢&#xA;fnirt --ref=a.nii.gz \&#xA;  --in=b.nii.gz \&#xA;  --aff=b2a_linWarp.mat \&#xA;  --cout=b2a_nlinWarp \&#xA;  --verbose&#xA;&#xA;applywarp --ref=a.nii.gz \&#xA;  --in=roi.nii.gz \&#xA;  --warp=b2a_nlinWarp.nii.gz \&#xA;  --out=roi_space-a.nii.gz \&#xA;  -v&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;其他一些有用的命令：&lt;/p&gt;</description>
    </item>
    <item>
      <title>对PET图像进行归中心处理</title>
      <link>/post/2022/03/24/blog/</link>
      <pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate>
      <guid>/post/2022/03/24/blog/</guid>
      <description>&lt;p&gt;本段代码参考自：https://github.com/DlutMedimgGroup/Chinese-Brain-PET-Template/blob/master/Matlab%20Scripts/Reset_Origin.m&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;%对图像进行归中心的处理&#xA;function [] = Reset_Origin(ROOT)&#xA;niftiRootPath = fullfile(ROOT, &#39;*.nii&#39;);&#xA;niftiSubs = dir(niftiRootPath);&#xA;%归中心处理&#xA;for i = 1:numel(niftiSubs)&#xA;    disp(fullfile(ROOT, niftiSubs(i).name))%显示当前处理图像名称&#xA;    st.vol = spm_vol(fullfile(ROOT, niftiSubs(i).name));&#xA;    vs = st.vol.mat\eye(4);&#xA;    vs(1:3,4) = (st.vol.dim+1)/2;&#xA;    spm_get_space(st.vol.fname,inv(vs));&#xA;end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>FreeSurfer笔记之二</title>
      <link>/post/2022/03/15/blog/</link>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
      <guid>/post/2022/03/15/blog/</guid>
      <description>&lt;h1 id=&#34;the-measures-about-curvatures&#34;&gt;The measures about curvatures&lt;/h1&gt;&#xA;&lt;h2 id=&#34;mris_curvature_stats&#34;&gt;mris_curvature_stats&lt;/h2&gt;&#xA;&lt;p&gt;?h.smoothwm.xxx.crv is the the binary-curvature files where xxx is the different measures. Detailed descriptation is as follows:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;k1 &#x9;maximum curvature&lt;/p&gt;&#xA;&lt;p&gt;k2 &#x9;minimum curvature&lt;/p&gt;&#xA;&lt;p&gt;K &#x9;Gaussian &#x9;= k1*k2&lt;/p&gt;&#xA;&lt;p&gt;H&#x9;Mean &#x9;&#x9;= 0.5*(k1+k2)&lt;/p&gt;&#xA;&lt;p&gt;C&#x9;Curvedness &#x9;= sqrt(0.5*(k1&lt;em&gt;k1+k2&lt;/em&gt;k2))&lt;/p&gt;&#xA;&lt;p&gt;S&#x9;Sharpness &#x9;= (k1 - k2)^2&lt;/p&gt;&#xA;&lt;p&gt;BE&#x9;Bending Energy &#x9;= k1&lt;em&gt;k1 + k2&lt;/em&gt;k2&lt;/p&gt;&#xA;&lt;p&gt;SI&#x9;Shape Index&#x9;= atan((k1+k2)/(k2-k1))&lt;/p&gt;&#xA;&lt;p&gt;FI&#x9;Folding Index&#x9;= |k1|*(|k1| - |k2|)&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;In each file, the corresponding measures for each vertex were saved. And you may read it by read.fs.curv() in R package &amp;ldquo;freesurferformats&amp;rdquo;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>FreeSurfer笔记之一</title>
      <link>/post/2022/03/11/blog/</link>
      <pubDate>Fri, 11 Mar 2022 00:00:00 +0000</pubDate>
      <guid>/post/2022/03/11/blog/</guid>
      <description>&lt;h2 id=&#34;outputs&#34;&gt;Outputs&lt;/h2&gt;&#xA;&lt;p&gt;FreeSurfer首先去除颅骨（stripped skull），生成brainmask.mgz文件，并进一步分出灰质、白质和皮下结构，保存在aseg.mgz文件中。与此同时，得到白质/灰质的初步估计（?h.orig），随后对分界面进行进一步的调整得到?j.white。在?h.white的基础上，分界面继续向外膨胀得到?h.pial，并进一步膨胀得到?h.inflated。?h.sphere为?h.inflated膨胀形成的球面。可以用来与其他空间图像进行配准（例如fsaverage）。&lt;/p&gt;&#xA;&lt;p&gt;recon-all命令中的-qcache可以生成fsaverage空间中的且经过平滑后的数据。&lt;/p&gt;&#xA;&lt;h3 id=&#34;label文件夹&#34;&gt;label文件夹&lt;/h3&gt;&#xA;&lt;p&gt;.ctab文件为颜色表（color table），存储不同atlas定义脑区的颜色。.annot文件为分区信息，其中包含每个vertex所属的脑区等信息。.label文件保存所有vertex所属脑区编号和坐标。&lt;/p&gt;&#xA;&lt;h3 id=&#34;surf文件夹&#34;&gt;surf文件夹&lt;/h3&gt;&#xA;&lt;p&gt;?h.area为midthickness表面的面积，?h.area.pial为灰质（软脑膜）表面的面积。?h.sulc为沟回宽度。&lt;/p&gt;&#xA;&lt;h3 id=&#34;stats文件夹&#34;&gt;stats文件夹&lt;/h3&gt;&#xA;&lt;p&gt;保存不同分区下的灰质指标。&lt;/p&gt;&#xA;&lt;h2 id=&#34;命令&#34;&gt;命令&lt;/h2&gt;&#xA;&lt;h3 id=&#34;mris_preproc&#34;&gt;mris_preproc&lt;/h3&gt;&#xA;&lt;p&gt;将个体皮层空间中的指标文件投射到fsavergae等标准皮层空间。&lt;/p&gt;&#xA;&lt;h4 id=&#34;example-1&#34;&gt;Example-1&lt;/h4&gt;&#xA;&lt;p&gt;Resample abcXX-anat/surf/lh.thickness onto fsaverage:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mris_preproc --s abc01-anat \&#xA;             --s abc02-anat \&#xA;             --s abc03-anat \&#xA;             --s abc04-anat \&#xA;             --target fsaverage \&#xA;             --hemi lh \&#xA;             --meas thickness \&#xA;             --out abc-lh-thickness.mgh&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;example-2&#34;&gt;Example-2&lt;/h4&gt;&#xA;&lt;p&gt;Same as #1 but smooths by 5mm fwhm:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mris_preproc --s abc01-anat \&#xA;             --s abc02-anat \&#xA;             --s abc03-anat \&#xA;             --s abc04-anat \&#xA;             --target fsaverage \&#xA;             --hemi lh \&#xA;             --meas thickness \ &#xA;             --fwhm 5 \&#xA;             --out abc-lh-thickness.sm5.mgh&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;mri_glmfit&#34;&gt;mri_glmfit&lt;/h3&gt;&#xA;&lt;p&gt;GLM建模统计。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CIFTI文件的读取和可视化</title>
      <link>/post/2022/02/22/blog/</link>
      <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
      <guid>/post/2022/02/22/blog/</guid>
      <description>&lt;p&gt;CIFTI (Connectivity Informatics Technology Initiative) 是HCP项目中开发的神经影像存储格式。具体可参考2016年Glasser等人发表的文章(Glasser et al., Nature neuroscience, 2015)。开发者在GitHub上提供了读写的MATLAB工具包，可在此处下载：https://github.com/Washington-University/cifti-matlab。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Singularity-05-Matlab&amp;fmriprep</title>
      <link>/post/2022/02/21/blog/</link>
      <pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate>
      <guid>/post/2022/02/21/blog/</guid>
      <description>&lt;h1 id=&#34;运行matlab&#34;&gt;运行MATLAB&lt;/h1&gt;&#xA;&lt;p&gt;使用matlab镜像运行matlab可使用如下命令：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;singularity exec matlab-r2020a.img matlab -batch xxx&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;其中matlab-r2020a.img为镜像名称，xxx为matlab脚本，不包含.m。&lt;/p&gt;&#xA;&lt;h1 id=&#34;运行fmriprep&#34;&gt;运行fmriprep&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;脑院高性能平台最高支持fmriprep版本为20.1.3，版本再高会报告I/O异常的错误。&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;在镜像中运行fmriprep的命令（不同版本的命令有些许差异，这里以20.1.3为例）如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;singularity exec fmriprep-20.1.3.simg fmriprep data-test/ fres_data-test/ participant \&#xA;--skip_bids_validation \&#xA;--participant_label 12002 \&#xA;-w fwk_data-test/ \&#xA;--verbose \&#xA;--fs-license-file license_lin.txt&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;其中fmriprep-20.1.3.simg为镜像名称。data-test为存放所有被试的文件夹。&lt;/p&gt;&#xA;&lt;p&gt;运行smriprep的命令如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;singularity exec fmriprep-20.1.3.simg smriprep data-test/ sres_data-test/ participant \&#xA;--pariticipant_label 12002 \&#xA;-w fwk_data-test/ \&#xA;--fs-license-file license_lin.txt&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>下载templateflow</title>
      <link>/post/2022/02/18/blog/</link>
      <pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate>
      <guid>/post/2022/02/18/blog/</guid>
      <description>&lt;p&gt;templateflow中包含了一些典型的神经影像脑模版，可在fmriprep等工具中使用。本文主要介绍如何下载templateflow。&lt;/p&gt;&#xA;&lt;h1 id=&#34;准备&#34;&gt;准备&lt;/h1&gt;&#xA;&lt;p&gt;GitHub上有它的仓库，但是那只是DataLab的索引，因此直接下载是不能下载到模版文件的。需要通过DataLab下载。&lt;/p&gt;&#xA;&lt;p&gt;首先，安装DataLab（以Ubuntu 21.10为例）。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda install -c conda-forge datalad&#xA;# OR&#xA;sudo apt-get install datalab&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;下载&#34;&gt;下载&lt;/h1&gt;&#xA;&lt;p&gt;下载索引文件，并使用DataLab下载模版。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/templateflow/templateflow.git&#xA;cd templateflow&#xA;# tpl-* 下载所有模版&#xA;datalad get -r tpl-fsLR&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;通过python下载&#34;&gt;通过python下载&lt;/h1&gt;&#xA;&lt;p&gt;笔者在使用datalad下载过程中，会经常遇到进度条长时间不动的情况。而且印象当中，笔者以前用python下载成功过，速度也不是很慢。因此这里将python下载templateflow的方法也追加进来。&lt;/p&gt;&#xA;&lt;p&gt;首先设置环境变量。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export TEMPLATEFLOW_HOME=$HOME/.templateflow&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;使用pip安装templateflow包。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m pip install -U templateflow&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;下载templateflow。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -c &amp;quot;from templateflow.api import get; get([&#39;MNI152NLin2009cAsym&#39;, &#39;MNI152NLin6Asym&#39;, &#39;OASIS30ANTs&#39;, &#39;MNIPediatricAsym&#39;, &#39;MNIInfant&#39;])&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;这里可以根据需要下载相应的模版文件。&lt;/p&gt;&#xA;&lt;h1 id=&#34;相关链接&#34;&gt;相关链接&lt;/h1&gt;&#xA;&lt;p&gt;templateflow项目地址：https://github.com/templateflow/&lt;/p&gt;&#xA;&lt;p&gt;DataLad网址：https://www.datalad.org/&lt;/p&gt;&#xA;&lt;p&gt;python下载参考网址：https://fmriprep.org/en/1.5.9/spaces.html&lt;/p&gt;</description>
    </item>
    <item>
      <title>Singularity-04-安装MATLAB</title>
      <link>/post/2022/02/17/blog/</link>
      <pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate>
      <guid>/post/2022/02/17/blog/</guid>
      <description>&lt;p&gt;以下是记录本人在使用学院高性能计算平台运行singularity中遇到的问题以及相应的解决方法，不一定适用于其他场景。&lt;/p&gt;&#xA;&lt;h1 id=&#34;建立基础镜像&#34;&gt;建立基础镜像&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo singularity build --sandbox tmp/ docker://centos:7&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;尝试过ubuntu:20.04和18.04，在服务器上均会报告“&lt;strong&gt;FATAL: kernel too old&lt;/strong&gt;”的错误。Centos6.10和7可以，但是6.10的yum源已经不再支持。因此使用Centos7作为基础镜像。&lt;/p&gt;&#xA;&lt;h1 id=&#34;安装matlab&#34;&gt;安装MATLAB&lt;/h1&gt;&#xA;&lt;p&gt;这里参考：https://zhuanlan.zhihu.com/p/394298249&lt;/p&gt;&#xA;&lt;p&gt;需要注意的是，安装之前，需要在系统里面安装一些库文件和编译器，命令如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum install libX11 libXmu&#xA;yum install gcc java-11-openjdk-devel&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;em&gt;libXmu中包含libXt.so.6。&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;后处理&#34;&gt;后处理&lt;/h1&gt;&#xA;&lt;p&gt;安装好MATLAB后，发现无法通过&lt;strong&gt;singularity exec&lt;/strong&gt;去调用。在**/environment**文件中将MATLAB的安装路径添加进PATH环境变量里面也无法直接运行（可能是写入的命令格式有问题，不确定）。之后查到可以定义一个recipe文件（append.def），通过已经生成的镜像重新构建镜像。recipe文件内容如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Bootstrap: localimage&#xA;From: tmp/&#xA;&#xA;%environment&#xA;        export PATH=/usr/local/matlab/R2020a/bin:$PATH&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;然后重新构建镜像：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo singularity build --sandbox senv-matlab/ append.def&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;构建完成后，需要将镜像打包为可读写的格式（.img文件）。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo singularity build --writable senv-matlab.img senv-matlab/&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;这里生成的senv-matlab.img就可在服务器上使用了，也可在服务器上将其转换为压缩格式（.sif/.sqsh/.simg文件等）。不知道为什么直接在本地（Ubuntu 21.10）压缩后，在本地无运行镜像，会报告如下错误。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ERROR  : Failed to mount squashfs image in (read only): Invalid argument&#xA;ABORT  : Retval = 255&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/394298249&#34;&gt;https://zhuanlan.zhihu.com/p/394298249&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Find clusters in a image</title>
      <link>/post/2022/01/19/blog/</link>
      <pubDate>Wed, 19 Jan 2022 00:00:00 +0000</pubDate>
      <guid>/post/2022/01/19/blog/</guid>
      <description>&lt;h1 id=&#34;问题&#34;&gt;问题&lt;/h1&gt;&#xA;&lt;p&gt;我们在对神经影像数据做完统计后（例如ICA），会得到相应的mask二值文件。但是有些情况下，我们还需要进一步对mask中每一个cluster进行分析（例如计算mask中每个cluster之间的功能连接）。所以我们需要从mask文件中得到每一个cluster。由于没有想到有哪个现成的工具包可以解决上述的问题。因此，本文试图用自己的方式去解决上述的问题。&lt;/p&gt;&#xA;&lt;h1 id=&#34;方法&#34;&gt;方法&lt;/h1&gt;&#xA;&lt;h2 id=&#34;思路一&#34;&gt;思路一&lt;/h2&gt;&#xA;&lt;p&gt;看到这个问题的时候，最朴素的想法就是用MRIcron/GL或者ITK-SNAP手动将mask中的每一个cluster标记出来。&lt;/p&gt;&#xA;&lt;h2 id=&#34;思路二&#34;&gt;思路二&lt;/h2&gt;&#xA;&lt;p&gt;虽然上述手动标记的方法能解决这个问题，但是显得没那么优雅（bushi。就想换用代码解决这个问题。而且写完代码下次再碰到类似的问题，就能直接使用了（还能水一篇推送。&lt;/p&gt;&#xA;&lt;p&gt;首先我想着先找出mask中所有非零元素的下标，然后选一个非零元素，再去判断这个元素的邻域是否是0（如果是0就意味着已经到了这个cluster的边缘）。但是在三维图像里面，要判断邻域是否到达边缘，需要写8个条件判断，这也很不优雅（主要还是找到了一个现成的轮子。&lt;/p&gt;&#xA;&lt;p&gt;之后在找“轮子”的时候，看到了scipy包里面的一个函数可以实现上面的过程。因此通过调用它近乎完美地解决了最开始的问题（bushi。下面是相应的代码。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import nibabel as nib&#xA;from scipy.ndimage import measurements&#xA;import logging&#xA;logging.basicConfig(level=logging.INFO)&#xA;&#xA;img = nib.load(&#39;test-binary.nii&#39;)&#xA;data = img.get_fdata()&#xA;labels, num_labels = measurements.label(data)&#xA;logging.info(f&#39;The number of cluster is {num_labels}&#39;)&#xA;nib.save(nib.Nifti1Image(labels, img.affine), f&#39;test_cluster-mix.nii&#39;)&#xA;for i in range(num_labels):&#xA;    tmp_data = np.zeros(data.shape)&#xA;    tmp_data[labels == i + 1] = 1&#xA;    nib.save(nib.Nifti1Image(tmp_data, img.affine), f&#39;test_cluster-{i+1}.nii&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;test-binary.nii是从Neurosynth上随便找的一个功能连接图谱，并以±0.2作为阈值得到的mask文件（Figure 1）。&lt;/p&gt;&#xA;&lt;div class=&#34;figure&#34;&gt;&#xA;&lt;img src=&#34;./img/fig-1.png&#34; alt=&#34;test-binary.nii可视化结果。&#34;  /&gt;&#xA;&lt;p class=&#34;caption&#34;&gt;&lt;span id=&#34;fig:unnamed-chunk-1&#34;&gt;&lt;/span&gt;Figure 1: test-binary.nii可视化结果。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;上述代码运行后，对于mask中的每一个cluster会得到一个.nii文件，同时也会得到一个混合了所有cluster的.nii文件。结果如Figure 2所示。&lt;/p&gt;&#xA;&lt;div class=&#34;figure&#34;&gt;&#xA;&lt;img src=&#34;./img/fig-2.png&#34; alt=&#34;混合了所有cluster的结果，其中每个cluster用一个整数标记。&#34;  /&gt;&#xA;&lt;p class=&#34;caption&#34;&gt;&lt;span id=&#34;fig:unnamed-chunk-2&#34;&gt;&lt;/span&gt;Figure 2: 混合了所有cluster的结果，其中每个cluster用一个整数标记。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://neurosynth.org/locations/-4_24_46_6&#34;&gt;https://neurosynth.org/locations/-4_24_46_6&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/52087533/how-to-find-number-of-clusters-in-a-image/52088840&#34;&gt;https://stackoverflow.com/questions/52087533/how-to-find-number-of-clusters-in-a-image/52088840&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python for Neuroimage data</title>
      <link>/post/2021/11/20/blog/</link>
      <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/11/20/blog/</guid>
      <description>&lt;h1 id=&#34;dicom文件&#34;&gt;DICOM文件&lt;/h1&gt;&#xA;&lt;p&gt;DICOM格式是医学成像设备输出的统一的文件格式，它包含数据头信息和数据信息两部分。其中头信息包含扫描设备的信息以及被试的信息等，另外还包括其他关于数据的元信息。数据部分是扫描设备采集到扫描物体的信号值。&lt;/p&gt;&#xA;&lt;p&gt;利用Pydicom包可以使用Python操作DICOM文件，包括对DICOM文件的读写、头信息的增删改等。&lt;/p&gt;&#xA;&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-{.bash}&#34;&gt;pip install pydicom&#xA;# 或&#xA;conda install -c conda-forge pydicom&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;示例数据&#34;&gt;示例数据&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-{.python}&#34;&gt;from pydicom.data import get_testdata_file&#xA;fpath = get_testdata_file(&amp;quot;CT_small.dcm&amp;quot;)&#xA;fpath&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Out: &amp;lsquo;/Applications/miniconda3/lib/python3.9/site-packages/pydicom/data/test_files/CT_small.dcm&amp;rsquo;&lt;/p&gt;&#xA;&lt;h2 id=&#34;读入文件&#34;&gt;读入文件&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pydicom import dcmread&#xA;ds = dcmread(fpath)&#xA;ds&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;输出：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Dataset.file_meta -------------------------------&#xA;(0002, 0000) File Meta Information Group Length  UL: 192&#xA;(0002, 0001) File Meta Information Version       OB: b&#39;\x00\x01&#39;&#xA;(0002, 0002) Media Storage SOP Class UID         UI: CT Image Storage&#xA;(0002, 0003) Media Storage SOP Instance UID      UI: 1.3.6.1.4.1.5962.1.1.1.1.1.20040119072730.12322&#xA;(0002, 0010) Transfer Syntax UID                 UI: Explicit VR Little Endian&#xA;(0002, 0012) Implementation Class UID            UI: 1.3.6.1.4.1.5962.2&#xA;(0002, 0013) Implementation Version Name         SH: &#39;DCTOOL100&#39;&#xA;(0002, 0016) Source Application Entity Title     AE: &#39;CLUNIE1&#39;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;访问数据的子元素&#34;&gt;访问数据的子元素&lt;/h2&gt;&#xA;&lt;p&gt;可以通过两种方式访问ds中的元素，其一是利用元素的位置，即每个元素中最前面的两个两位十六进制数，如(0x0043, 0x104e)；其二是利用元素的名称访问。下面对三种方式分别进行演示。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Weekly summary</title>
      <link>/post/2021/11/19/blog/</link>
      <pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/11/19/blog/</guid>
      <description>&lt;h2 id=&#34;自定义colormap&#34;&gt;自定义Colormap&lt;/h2&gt;&#xA;&lt;p&gt;在一些场景下，我们需要自己构造数字与颜色的对应关系。比如，我们在探究每个ROI随龄变化的趋势时，我们需要将回归方程中年龄的系数展示在脑图上。朴素的想法是，我构造一个关于系数与颜色的映射关系，给定某一系数，就返回相应的颜色。实现方法如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;library(tidyverse)&#xA;library(RColorBrewer)&#xA;&#xA;data &amp;lt;- data.frame(Val = rnorm(100)) %&amp;gt;% as_tibble()&#xA;&#xA;# 选择合适的颜色&#xA;colors &amp;lt;- brewer.pal(11, &#39;RdBu&#39;)&#xA;# 考虑到数字的正负号，我们这里用差异较明显的颜色区分正负&#xA;pos.color &amp;lt;- colorRampPalette(colors[6:1])(1000 * round(max(data$Val), 3) + 1)&#xA;neg.color &amp;lt;- colorRampPalette(colors[6:11])(-1000 * round(min(data$Val), 3) + 1)&#xA;&#xA;res &amp;lt;- rep(&#39;&#39;, length(data$Val))&#xA;for (i in 1:length(data$Val)) {&#xA;  if (round(data$Val[i], 3) &amp;lt; 0) {&#xA;    res[i] &amp;lt;- neg.color[1000 * round(-data$Val[i], 3)]&#xA;  } else if (round(data$Val[i], 3) &amp;gt; 0) {&#xA;    res[i] &amp;lt;- pos.color[1000 * round(data$Val[i], 3)]&#xA;  } else {&#xA;    res[i] &amp;lt;- pos.color[1]&#xA;  }&#xA;}&#xA;data[&#39;Color&#39;] &amp;lt;- res&#xA;data[, c(&#39;Red&#39;, &#39;Green&#39;, &#39;Blue&#39;)] &amp;lt;- t(col2rgb(res)) / 255&#xA;&#xA;# 演示颜色&#xA;ggplot(data = data, aes(x = Val, y = Val)) +&#xA;  geom_point(color = data$Color, size = 10)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;其中，data中同一行表示数字与对应的颜色。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Toolbox for WMH</title>
      <link>/post/2021/11/07/blog/</link>
      <pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/11/07/blog/</guid>
      <description>&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;&#xA;&lt;p&gt;白质高信号（white matter hyperintensity, WMH）是一种因脑白质病变导致的、在T2 Flari像上表现为高灰质值的现象。在相关研究中，确定白质高信号区域是一个基本的问题。一般认为，由专业的影像科医生或受过培训的人员手动分割的结果是金标准。然而，手动分割费时费力。因而，研究者提出了许多自动半自动的分割工具。本文将对几种常用的白质高信号自动分割工具的用法进行简单介绍。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/fig_01.png&#34; alt=&#34;&#34;&gt;&lt;!-- --&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;lst&#34;&gt;LST&lt;/h2&gt;&#xA;&lt;p&gt;LST (&lt;a href=&#34;https://www.applied-statistics.de/lst.html&#34;&gt;https://www.applied-statistics.de/lst.html&lt;/a&gt;) 是基于SPM的白质高信号分割工具，它包含两个分割算法：LPA和LGA。其中，LPA不需要T1数据，而LGA需要T1和Flari数据。&lt;/p&gt;&#xA;&lt;p&gt;代码入下：&lt;/p&gt;&#xA;&lt;h3 id=&#34;lpa&#34;&gt;LPA&lt;/h3&gt;&#xA;&lt;p&gt;尽管LPA在分割WMH的时候不需要T1数据，然而在输入里面还是可以将T1数据输入，用来作为配准的参考图像。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;% WMH segment by LPA in LST.&#xA;close all; clear; clc;&#xA;&#xA;% Set SPM12 into Path.&#xA;SPM_PATH = &#39;~/Tools/spm12&#39;;&#xA;addpath(SPM_PATH);&#xA;&#xA;% Set root path.&#xA;ROOT = &#39;Work&#39;;&#xA;&#xA;subs = dir(ROOT);&#xA;subs = subs(3:end);&#xA;for i = 1:numel(subs)&#xA;    % for single subject.&#xA;    disp(subs(i).name);&#xA;    sub_path = fullfile(ROOT, subs(i).name);&#xA;    &#xA;    t1_path = fullfile(sub_path, &#39;t1.nii&#39;);&#xA;    if ~exist(t1_path, &#39;file&#39;)&#xA;        % gunzip the .gz file.&#xA;        gunzip(fullfile(sub_path, &#39;t1.nii.gz&#39;));&#xA;    end&#xA;    flair_path = fullfile(sub_path, &#39;flair.nii&#39;);&#xA;    if ~exist(flair_path, &#39;file&#39;)&#xA;        gunzip(fullfile(sub_path, &#39;flair.nii.gz&#39;));&#xA;    end&#xA;    &#xA;    pause(10);&#xA;    &#xA;    spm_jobman(&#39;initcfg&#39;);&#xA;    matlabbatch{1}.spm.tools.LST.lpa.data_F2 = {strcat(flair_path, &#39;,1&#39;)};&#xA;    matlabbatch{1}.spm.tools.LST.lpa.data_coreg = {strcat(t1_path, &#39;,1&#39;)};&#xA;    matlabbatch{1}.spm.tools.LST.lpa.html_report = 1;&#xA;    spm(&#39;defaults&#39;, &#39;pet&#39;);&#xA;    spm_jobman(&#39;run&#39;, matlabbatch);&#xA;    clear matlabbatch;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;lga&#34;&gt;LGA&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;% WMH segment by LGA in LST.&#xA;close all; clear; clc;&#xA;&#xA;% Set SPM12 into Path.&#xA;SPM_PATH = &#39;/home/babri3/Tools/spm12&#39;;&#xA;addpath(SPM_PATH)&#xA;&#xA;% Set root path.&#xA;ROOT = &#39;Work&#39;;&#xA;&#xA;&#xA;subs = dir(ROOT);&#xA;subs = subs(3:end);&#xA;for i = 1:numel(subs)&#xA;    % for single subject.&#xA;    disp(subs(i).name);&#xA;    sub_path = fullfile(ROOT, subs(i).name);&#xA;    &#xA;    t1_path = fullfile(sub_path, &#39;t1.nii&#39;);&#xA;    if ~exist(t1_path, &#39;file&#39;)&#xA;        % gunzip the .gz &#xA;        gunzip(fullfile(sub_path, &#39;t1.nii.gz&#39;));&#xA;    end&#xA;    flair_path = fullfile(sub_path, &#39;flair.nii&#39;);&#xA;    if ~exist(flair_path, &#39;file&#39;)&#xA;        gunzip(fullfile(sub_path, &#39;flair.nii.gz&#39;));&#xA;    end&#xA;    pause(10);&#xA;    disp(t1_path);&#xA;    disp(flair_path);&#xA;    spm_jobman(&#39;initcfg&#39;);&#xA;   %-----------------------------------------------------------------------&#xA;    % Job saved on 29-Sep-2020 18:30:58 by cfg_util (rev $Rev: 6942 $)&#xA;    % spm SPM - SPM12 (7219)&#xA;    % cfg_basicio BasicIO - Unknown&#xA;    %-----------------------------------------------------------------------&#xA;    matlabbatch{1}.spm.tools.LST.lga.data_T1 = {strcat(t1_path, &#39;,1&#39;)};&#xA;    matlabbatch{1}.spm.tools.LST.lga.data_F2 = {strcat(flair_path, &#39;,1&#39;)};&#xA;    matlabbatch{1}.spm.tools.LST.lga.opts_lga.initial = 0.3;&#xA;    matlabbatch{1}.spm.tools.LST.lga.opts_lga.mrf = 1;&#xA;    matlabbatch{1}.spm.tools.LST.lga.opts_lga.maxiter = 50;&#xA;    matlabbatch{1}.spm.tools.LST.lga.html_report = 1;&#xA;    spm(&#39;defaults&#39;,&#39;pet&#39;);&#xA;    spm_jobman(&#39;run&#39;, matlabbatch);&#xA;    clear matlabbatch;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;bianca&#34;&gt;BIANCA&lt;/h2&gt;&#xA;&lt;p&gt;BIANCA (&lt;a href=&#34;https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/BIANCA&#34;&gt;https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/BIANCA&lt;/a&gt;) 是一种基于监督学习的WMH分割工具，是FSL的一个子模块。在使用它之前，需要先得到一部分被试的分割结果作为训练数据。可用其他的自动化分割方法的结果作为训练数据。&lt;/p&gt;</description>
    </item>
    <item>
      <title>数据可视化：和弦图</title>
      <link>/post/2021/09/19/blog/</link>
      <pubDate>Sun, 19 Sep 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/09/19/blog/</guid>
      <description>&lt;p&gt;和弦图用于展示不同实体之间的关系，在脑网络研究中也经常使用。本文将介绍一个绘制和弦图的网站并演示其用法。&lt;/p&gt;&#xA;&lt;p&gt;网址：https://charticulator.com&lt;/p&gt;&#xA;&lt;h1 id=&#34;数据准备&#34;&gt;数据准备&lt;/h1&gt;&#xA;&lt;p&gt;首先准备两个表格，内容分为为和弦图中的节点信息和连边的信息，对应示例中的node.csv和link.csv。&lt;/p&gt;&#xA;&lt;p&gt;node.csv中必须包含id列，用于唯一标识和弦图中的节点。示例中的节点为Schaefer等人在2018年发布的100个脑区的脑图谱。其他列为可选列，可以用来指定和弦图中节点的大小等。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/fig-01.png&#34; alt=&#34;&#34;&gt;&lt;!-- --&gt;&lt;/p&gt;&#xA;&lt;p&gt;link.csv中必须包含source_id和target_id列，其值为node.csv中id的值。link.csv中每一行表示和弦图中一条连边。同样，其他列为可选列，可以指定和弦图中连边的宽度等。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/fig-02.png&#34; alt=&#34;&#34;&gt;&lt;!-- --&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;步骤&#34;&gt;步骤&lt;/h1&gt;&#xA;&lt;h2 id=&#34;加载数据&#34;&gt;加载数据&lt;/h2&gt;&#xA;&lt;p&gt;打开网站后，将node.csv和link.csv分别拖动到Node和Links，然后点击Done即可完成数据的加载。之后网页会跳转到绘图页面。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/fig-03.gif&#34; alt=&#34;&#34;&gt;&lt;!-- --&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;添加节点&#34;&gt;添加节点&lt;/h2&gt;&#xA;&lt;p&gt;第一步，点击顶栏的矩形块，并在绘图区插入选中的矩形块，会自动添加与node.csv文件中指定的节点个数相等的矩形块。&#xA;第二步，将id拖动到矩形块的color属性上，用不同的颜色来区分节点。&#xA;第三步，将矩形块按照x轴堆叠的方式排列，并设置为极坐标显示。&#xA;第四步，调整矩形块的内外环半径。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/fig-04.gif&#34; alt=&#34;&#34;&gt;&lt;!-- --&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;添加连边&#34;&gt;添加连边&lt;/h2&gt;&#xA;&lt;p&gt;第一步，点击顶栏的边按钮，添加连边。&#xA;第二步，将target_id的颜色设置为连边的颜色。&#xA;第三步，将连边权重值设置为边的宽度。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/fig-05.gif&#34; alt=&#34;&#34;&gt;&lt;!-- --&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;添加文本&#34;&gt;添加文本&lt;/h2&gt;&#xA;&lt;p&gt;第一步，点击顶栏文本按钮。&#xA;第二步，将id拖动到添加的文本元素上。&#xA;第三步，调整文本的方向和大小。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/fig-06.gif&#34; alt=&#34;&#34;&gt;&lt;!-- --&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;导出图片&#34;&gt;导出图片&lt;/h2&gt;&#xA;&lt;p&gt;点击保存按钮，并调整dpi后，得到最终的图片。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/fig-07.gif&#34; alt=&#34;&#34;&gt;&lt;!-- --&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;参考文献&#34;&gt;参考文献&lt;/h1&gt;&#xA;&lt;p&gt;脑图谱文章：Schaefer, Alexander, Ru Kong, Evan M. Gordon, Timothy O. Laumann, Xi-Nian Zuo, Avram J. Holmes, Simon B. Eickhoff, and B. T. Thomas Yeo. 2018. “Local-Global Parcellation of the Human Cerebral Cortex from Intrinsic Functional Connectivity MRI.” Cerebral Cortex 28(9):3095–3114. doi: 10.1093/cercor/bhx179.&lt;/p&gt;</description>
    </item>
    <item>
      <title>文献总结-从儿童期到青少年期结构共变网络的改变</title>
      <link>/post/2021/09/12/blog/</link>
      <pubDate>Sun, 12 Sep 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/09/12/blog/</guid>
      <description>&lt;p&gt;期刊：Scientific Reports, (2021)11:9415&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/fig-01.png&#34; alt=&#34;&#34;&gt;&lt;!-- --&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;&#xA;&lt;p&gt;结构共变（SCN）是指在群体水平上不同大脑区域形态学指标之间的相关。它可以为发育期功能性网络模块的形成提供皮层结构的信息。本研究探究了从儿童期到青少年期大脑结构共变网络的变化模式，而这一时期会发生明显的大脑结构性的重组。本研究的被试在他们8.5岁到14.5岁之间进行了核磁扫描。研究者使用滑动时间窗方法选择一组被试作为“age-bin”，在每个“age-bin”上建模得到结构共变网络。之后，研究者使用广义加性模型（GAM）检查网络属性的随龄变化模式。结果显示了平均连接强度和网络密度的非线性变化轨迹。这表明在青少年早期阶段存在一段皮层结构属性趋同的时期，对应于前人研究中的脑区特异化现象。在儿童后期，感觉运动区域出现了一些“Hub”脑区。然而，到了青少年中期，联合皮层中的“Hub”节点范围和强度都出现了增加。此外，这些脑区水平的改变与发育期皮层变薄的速率相关。在对典型功能性网络连接的研究中发现，额顶、默认和注意网络均表现出了网络内部和网络之间共变性的随龄增加。本研究发现的脑区和脑网络层面上的发育模式，与青少年早期社会情绪和其他通过高级认知网络支持的复杂执行功能，在这一时期发生的一系列改变是一致的。&lt;/p&gt;&#xA;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;&#xA;&lt;p&gt;许多纵向研究验证了儿童期到青少年期大脑皮层变薄的发育模式，反映了突触修剪、髓鞘化或皮层形态发育特征。然而，这种发育模式在不同皮层区域不是同时发生的。重要的是，这种变异性表明结构皮层网络也可能在这一时期成熟。理解皮层区域之间不断变化的关系可能提供灰质发育单变量研究之外的独特信息，因为结构特性的协变性被认为是由经验依赖的可塑性和相互营养的过程产生的，例如，共同激发的区域连接在一起。特别是，儿童和青少年之间的过渡以及相关的青春期过程，带来了第二波结构“重组”，仅次于婴儿。然而，在这一时期缺乏对结构皮层网络发展的有针对性的研究。&lt;/p&gt;&#xA;&lt;p&gt;结构共变是一种多元分析技术，它概念化了不同大脑区域的形态特征在群体水平上如何相互关联。为此，对一组受试者的每个大脑区域测量皮质厚度等属性，并对整个组的每对区域计算这些区域估计值之间的相关性。虽然大多数研究都描述了某一个生命周期内结构共变的拓扑特性（如婴儿、儿童/青少年、老年），但一小部分研究表明，这些特性也会随着时间而变化。对儿童早期到青春期晚期的研究发现，网络的整合（即促进分布式大脑区域信息组合的能力）不断增加，分离（即促进区域组内专业化处理的能力）不断减少，然后是青春期的反向变化或达到平台期。一些关注青年期及青春期后期的研究表明，在14岁到20岁之间，大脑皮层整体相关性的强度在趋于稳定之前，存在降低的现象。这可能反映了不同大脑区域成熟时间的个体间差异。综上所述，这些研究提供了越来越多的证据，表明儿童和青少年之间的过渡可能以不断演变的结构网络特性为特征，并且这些整体变化在模式上可能是非线性的。&#xA;还有新出现的证据表明共变模式存在区域差异。例如，研究发现，从幼儿期到青年期，联系皮质的连接强度和效率持续增加，而边缘皮质和感觉运动皮质的连接强度和连接效率分别增加和减少。其他研究表明，神经认知系统（即功能团体内的区域）在青春期后期和青年期具有不同的发育模式，额叶顶网络的共变下降幅度最大。使用毕生发展方法的研究人员还发现，高阶认知系统表现出结构共变模式可以将年轻成年人与儿童/青少年和老年人区分开来。因此，以前的文献在使用广泛的年龄范围或寿命方法时确定了协方差模式的区域变异性。然而，将这些分析扩展到特别关注从儿童期到青春期的过渡期，可能会对神经发育的突出模型提供新的见解。&lt;/p&gt;&#xA;&lt;p&gt;青春期早期的生物学发育也具有显著的性别差异，这通常被认为是这一时期出现的精神病理学发病率显著性别差异的基础。虽然研究在很大程度上未能确定新生儿、青年和老年人在结构共变模式方面的差异，但针对儿童向青少年过渡的有针对性的研究可能为性别差异提供新的见解。由于支持身体成熟的青春期激素变化也作用于大脑的受体，同时女性青春期较早的成熟，因此一些人认为她们可能比男性经历更早的皮质和白质成熟。尽管许多研究未能确定皮层变薄的性别差异，但一些使用多变量方法的研究也支持了皮层变薄存在显著的性别差异。因此，对网络特性变化的研究可能为青春期早期男女大脑皮层成熟的潜在差异模式提供新的见解。&lt;/p&gt;&#xA;&lt;p&gt;目前的研究扩展了从儿童到青春期过渡期间大脑结构网络特性的相关研究。正如Váša和同事所强调的，以前的研究通常通过将参与者分为离散（和广泛）年龄组来提供结构网络发展的粗粒度解决方案。对年龄组的任意定义也可能导致文献中的不一致。因此，我们利用滑动窗口方法来精确描述该过渡期内结构共变网络的变化（即，区域结构属性之间的关系如何随时间变化）。我们的年龄定义结构共变网络基于较大参与者数量的滑动窗口和较窄的年龄范围从而提高了我们的相关性估计的稳健性。我们假设在从儿童晚期到青春期早期的过渡期间，整体连接密度增加，然后在青春期中期达到平稳或减少。我们还研究了共变网络拓扑特性的区域性变化，并在神经认知网络的背景下描述了这些变化。我们假设，在此期间，联合皮质，特别是额叶顶网络，可能表现出最大的共变模式变化。接下来，我们研究了皮质变薄和共变模式之间的关系，推测在青春期早期表现出最大变薄的区域也可能与大脑其他部分具有最大的共变性。最后，我们探讨了网络整体属性和神经认知网络中的性别差异。&lt;/p&gt;&#xA;&lt;h2 id=&#34;研究方法&#34;&gt;研究方法&lt;/h2&gt;&#xA;&lt;h3 id=&#34;参与者信息&#34;&gt;参与者信息&lt;/h3&gt;&#xA;&lt;p&gt;参与者来自澳大利亚墨尔本的社区，并被纳入两个纵向项目之一：1）儿童注意力项目（NICAP）的神经成像，以及2）儿童到青少年过渡研究（iCATS）的大脑发育成像。NICAP参与者作为典型的发展对照被招募到一项以社区为基础的患有和不患有ADHD的儿童队列研究中。排除标准包括MRI禁忌症、发育障碍、神经或严重疾病史（如糖尿病、肾病）和精神药物。对于这两个队列，均从所有参与者的父母/监护人处获得书面知情同意。伦理批准由墨尔本皇家儿童医院人类研究伦理委员会批准。iCATS协议还被墨尔本大学胡德胡德研究所批准，NICAP协议得到迪肯大学人类研究伦理办公室的批准。&lt;/p&gt;&#xA;&lt;p&gt;NICAP样本在9.5至14.5岁之间进行了多达3次的重复评估，评估间隔约为18个月(M = 1.432, SD = 0.222, 1.021 - 2.330年)。iCATS样本在8.5至13.5岁之间进行了2次重复评估，评估间隔约为36个月(M = 2.763，SD = 0.243，2.158 - 3.344年)。这两个样本在性别、发育程度和智力均无显著差异。然而，在基线检查时，iCATS样本明显比NICAP样本年轻(平均值: iCATS = 9.556, NICAP = 10.425; t(157) = -14.928, p &amp;lt; 0.001)，具有较高的社会经济地位（基于澳大利亚人口普查数据的相对社会经济优势和劣势区域指数的社会经济指数；平均值: iCATS = 1056.175, NICAP = 1018.326; t(198) = 4.887, p &amp;lt; 0.001）。&lt;/p&gt;&#xA;&lt;p&gt;在质量控制期间的排除（详见下文）之后，最终样本包括192名年龄在8.5-14.5岁的参与者（96名女性，90名NICAP）的366次扫描，用于创建横断面窗口。具体而言，59名参与者（28名男性）进行了一次扫描，92名参与者（46名男性）进行了两次扫描，41名参与者（22名男性）进行了三次扫描。&lt;/p&gt;&#xA;&lt;h3 id=&#34;mri采集和处理&#34;&gt;MRI采集和处理&lt;/h3&gt;&#xA;&lt;p&gt;这两个项目的神经成像数据都是在澳大利亚墨尔本默多克儿童研究所的3T西门子扫描仪（德国埃尔兰根西门子）上获得的。受试者在第1波实际扫描之前完成模拟扫描（如果受试者愿意或研究人员认为合适，则在随后的第1波中重复）。在参与之前，他们还获得了MRI信息（包括视频），以使他们熟悉手术过程并尽可能减少焦虑。在TIM Trio扫描仪上采集iCATS的第一批和NICAP第一和第二批次被试。NICAP的最后一批次参与者是在升级到MAGNETOM Prisma扫描仪后收集的，该扫描仪已在统计建模中进行了说明。&lt;/p&gt;&#xA;&lt;p&gt;T1加权图像通过FreeSurfer 6.0进行处理，FreeSurfer 6.0是一个免费提供的用于皮质重建和体积分割的图像分析套件。 具体而言，使用亚毫米级重建37和纵向流处理图像，该纵向流使用稳健的反向一致配准，从所有可用数据创建对象模板空间内的无偏。该模板被用作每个时间点初始化分割过程的估计值，提供有关解剖结构的公共信息，并被发现显著提高了可靠性和统计能力。对1) 原始图像和2)（纵向）皮质重建的质量进行目视检查，并对所有扫描进行评级。原始图像的“响铃”（1：无响铃；2：局限于小皮质区域的轻微响铃；3：更多响铃延伸至白质和/或覆盖更多大脑区域；4：广泛响铃）和“模糊”评分为4分（1：清晰清晰的图像；2：轻微模糊；3：或相当模糊；4：全程模糊）。排除任何一个等级的“3”和“4”评级。处理后的图像在白色和软膜表面的准确度上以3分制进行评级（1：近乎完美的重建；2：仅限于大脑小区域的轻微重建问题；3：重建不良，白质或脑脊液广泛区域被低估，包括灰质）。排除“3”评级。图像也通过MRIQC处理补充目视检查。这导致34名参与者总共排除了37次扫描（即3名参与者删除了2次扫描）。未对剩余（包括）数据进行手动编辑。从HCP处理流程的多模式分组图谱（HCP-MMP1）的360个区域提取平均皮质厚度估计值并用于后续分析。补充分析检查了Desikan Killianny Tourville（DKT）图谱的62个区域的平均皮质厚度。&lt;/p&gt;&#xA;&lt;h3 id=&#34;统计分析&#34;&gt;统计分析&lt;/h3&gt;&#xA;&lt;h4 id=&#34;结构共变网络scn建模&#34;&gt;结构共变网络（SCN）建模&lt;/h4&gt;&#xA;&lt;p&gt;滑动窗口方法涉及创建一系列重叠的参与者“箱子”，同时在该样本的年龄范围内逐步滑动。年龄“箱子”由1)窗口大小和2)步长定义。由于这种滑动窗口方法需要对样本和步长进行任意定义，我们对一系列参数进行了分析。研究了n=70、80和90的窗口大小，以及70%、75%和80%的样本重叠（即基于年龄的增量“步长”为20%、25%和30%）。对每一种窗口大小和步长组合都进行了分析，因此产生了9种配置。图1中给出了一个滑动窗口配置的数据的表示。&lt;/p&gt;</description>
    </item>
    <item>
      <title>一周小结</title>
      <link>/post/2021/09/03/blog/</link>
      <pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/09/03/blog/</guid>
      <description>&lt;h2 id=&#34;python并行处理&#34;&gt;Python并行处理&lt;/h2&gt;&#xA;&lt;p&gt;Python 中的concurrent包提供了对于并行运行的接口，包括进程级并行和线程级并行。下面是一个例子。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor&#xA;&#xA;def func(a, b):&#xA;    return a*b&#xA;&#xA;if __name__ == &#39;__main__&#39;:&#xA;    n_core = 4&#xA;    nums = 10000&#xA;    b = 2&#xA;&#xA;    res = [0 for _ in range(nums)]&#xA;    with ProcessPoolExecutor(n_core) as pool:&#xA;        futures = {pool.submit(func, i, b): i for i in range(1, nums)}&#xA;        for f in futures:&#xA;            res[futures[f]] = f.result()&#xA;    &#xA;    res = [0 for _ in range(nums)]&#xA;    with ThreadPoolExecutor(n_core) as pool:&#xA;        futures = {pool.submit(func, i, b): i for i in range(1, nums)}&#xA;        for f in futures:&#xA;            res[futures[f]] = f.result()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;在并行处理时，写明 &lt;em&gt;&lt;strong&gt;python if &lt;strong&gt;name&lt;/strong&gt; == &amp;lsquo;&lt;strong&gt;main&lt;/strong&gt;&amp;rsquo;&lt;/strong&gt;&lt;/em&gt; 以声明主进程。&lt;/p&gt;</description>
    </item>
    <item>
      <title>一周小结</title>
      <link>/post/2021/08/30/blog/</link>
      <pubDate>Mon, 30 Aug 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/08/30/blog/</guid>
      <description>&lt;p&gt;本文记录了上周笔者在使用GRETNA和CAT12中遇到的一些问题和想法。&lt;/p&gt;&#xA;&lt;h1 id=&#34;gretna&#34;&gt;GRETNA&lt;/h1&gt;&#xA;&lt;p&gt;GRETNA是脑网络中进行图论分析的一款工具包。它也支持对于静息态功能磁共振成像(fMRI)数据的预处理。在fMRI数据的网络拓扑分析中，最常见的网络建模方式是功能连接网络。其中，网络的节点表示脑区，而网络连边表示不同脑区BOLD信号时间序列的相关值——相关值越高，表明两个脑区连接越紧密。&lt;/p&gt;&#xA;&lt;p&gt;网络中连边值的问题是重要的，因为在另外一些网络中，网络连边值越高表明两个节点之间的代价越高。例如在公路网络中，节点为不同的城市，连边表示不同城市之间的距离。&lt;/p&gt;&#xA;&lt;p&gt;在GRETNA计算网络的平均距离时，在得到距离矩阵后进行了取倒数的操作。这一步，对于相关系数网络，即连边值越到，节点连接越紧密的加权网络而言是合适的。因为距离矩阵中的值表示的含义是两个节点之间的最短路径的权重和。它的值越大，表明两个节点连接越紧密。为了与通常的距离越远，代价越高的认知相一致，取倒数后就保证了连接越紧密的节点，它们的“距离”也越短。&lt;/p&gt;&#xA;&lt;p&gt;但对于二值网络而言，两个节点的距离是其最短路径中边的条数，也就是距离矩阵中的值的含义。节点距离越近，它们的连边条数也越少，“距离”也越短。因此这里不应该在进行取倒数的操作。&lt;/p&gt;&#xA;&lt;h1 id=&#34;cat12&#34;&gt;CAT12&lt;/h1&gt;&#xA;&lt;p&gt;使用CAT12中的Segment模块进行皮层构建时，默认会得到个体皮层厚度的文件。如果要进行SBM分析，还需要将个体皮层厚度文件转换到标准空间(fsaverage)中，这一步在CAT12中是包含在resample模块中的。&lt;/p&gt;&#xA;&lt;p&gt;另外，CAT12也提供了提取ROI上相关指标的功能。它在提取ROI指标时，也是将个体的指标文件转换到标准空间中，再计算图谱文件(annotation)定义的ROI的指标。这里个体指标转换到标准空间使用的也是resample模块，不过这里的平滑核是0. 这也是容易理解的，因为在计算ROI指标时，会平均整个ROI中所有的Vertex。这样由于个体指标再转换到标准空间中产生的误差就会被平均掉。而在进行SBM分析时，因为是逐Vertex进行的统计，上面的误差就会对统计产生影响，因此在SBM中，resample并且设置合适的平滑核大小是重要的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python作图-Heatmap</title>
      <link>/post/2021/08/22/blog/</link>
      <pubDate>Sun, 22 Aug 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/08/22/blog/</guid>
      <description>&lt;p&gt;本文用于记录笔者在使用seaborn绘制heatmap中遇到的一些问题和解决方法。&lt;/p&gt;&#xA;&lt;p&gt;完整的代码如下所示：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np&#xA;import pandas as pd&#xA;import seaborn as sns&#xA;import matplotlib.pyplot as plt&#xA;import matplotlib.font_manager as fm&#xA;import matplotlib.ticker as ticker&#xA;sns.set_theme(style=&amp;quot;white&amp;quot;)&#xA;&#xA;mat = np.random.rand(68*68)&#xA;mat = mat.reshape((68, 68))&#xA;labels = pd.DataFrame({&#39;Name&#39;: range(1, 69)})&#xA;&#xA;&#xA;cmap = sns.color_palette(&#39;flare&#39;, as_cmap=True)&#xA;&#xA;font = fm.FontProperties(fname=&#39;Resource/font/calibri.ttf&#39;)&#xA;&#xA;p = sns.heatmap(&#xA;    mat,&#xA;    mask=(mat==0),&#xA;    cmap=cmap,&#xA;    square=True,&#xA;    xticklabels=True,&#xA;    yticklabels=True,&#xA;    center=0.75,&#xA;    vmin=0.5)&#xA;&#xA;ax = p.figure.axes[0]&#xA;ax.axvline(34, color=&#39;k&#39;, alpha=0.8, linestyle=&#39;-&#39;, linewidth=0.8)&#xA;ax.axhline(34, color=&#39;k&#39;, alpha=0.8, linestyle=&#39;-&#39;, linewidth=0.8)&#xA;ax.set_title(&#39;Title of Heatmap&#39;, fontproperties=font, fontsize=14)&#xA;ax.set_xticklabels(labels[&#39;Name&#39;], fontproperties=font, fontsize=4)&#xA;ax.set_yticklabels(labels[&#39;Name&#39;], fontproperties=font, fontsize=4)&#xA;&#xA;barax = p.figure.axes[1]&#xA;barax.set_ylabel(&#39;Mean Value&#39;, fontproperties=font, fontsize=12)&#xA;barticks = barax.get_yticks()&#xA;tickformat = &#39;{:.1f}&#39;&#xA;barax.yaxis.set_major_locator(ticker.FixedLocator(barticks))&#xA;barax.set_yticklabels([tickformat.format(x) for x in barticks], fontproperties=font, fontsize=10)&#xA;barax.tick_params(direction=&#39;in&#39;, width=0)&#xA;&#xA;plt.savefig(&#39;demo.png&#39;, bbox_inches=&#39;tight&#39;, dpi=500)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;center&gt;&#xA;    &lt;img style=&#34;width:50%;&#34; &#xA;    src=&#34;./img/fig_1.png&#34;&gt;&#xA;    &lt;br&gt;&#xA;    &lt;div style=&#34;color:orange; border-bottom: 1px solid #d9d9d9;&#xA;    display: inline-block;&#xA;    color: #999;&#xA;    padding: 2px;&#34;&gt;图1. 示例结果&lt;/div&gt;&#xA;&lt;/center&gt;&#xA;&lt;h1 id=&#34;解释&#34;&gt;解释&lt;/h1&gt;&#xA;&lt;p&gt;导入相关包：&lt;/p&gt;</description>
    </item>
    <item>
      <title>远程Jupyter Notebook设置</title>
      <link>/post/2021/06/24/blog/</link>
      <pubDate>Thu, 24 Jun 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/06/24/blog/</guid>
      <description>&lt;p&gt;通过Jupyter可以使用远端服务器的计算资源，以下是设置步骤。&lt;/p&gt;&#xA;&lt;h1 id=&#34;安装jupyter&#34;&gt;安装Jupyter&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;## pip 安装&#xA;pip install notebook&#xA;&#xA;## conda安装&#xA;conda install -c conda-forge notebook&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;服务器端设置&#34;&gt;服务器端设置&lt;/h1&gt;&#xA;&lt;h3 id=&#34;生成密码密文&#34;&gt;生成密码密文：&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jupyter notebook password&#xA;Enter password:  &#xA;Verify password: &#xA;&amp;gt; [NotebookPasswordApp] Wrote hashed password to /home/you/.jupyter/jupyter_notebook_config.json&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;密文保存在/home/you/.jupyter/jupyter_notebook_config.json文件中。&lt;/p&gt;&#xA;&lt;h3 id=&#34;修改配置文件&#34;&gt;修改配置文件&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;## 打开前面生成的配置文件&#xA;vim ~/.jupyter/jupyter_notebook_config.py&#xA;## 修改配置内容&#xA;c.NotebookApp.ip=&#39;*&#39;&#xA;## 修改成将之前生成的密文&#xA;c.NotebookApp.password = u&#39;xxx&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;启动jupyter&#34;&gt;启动Jupyter&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jupyter notebook --no-browser --port=8889&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;本地设置&#34;&gt;本地设置&lt;/h1&gt;&#xA;&lt;p&gt;打开本地终端，输入以下命令：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh -N -f -L localhost:8836:localhost:8889 xxx@ip&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;之后打开浏览器，在地址栏中输入http://localhost:8836即可。&lt;/p&gt;&#xA;&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;&#xA;&lt;p&gt;[1] &lt;a href=&#34;https://blog.csdn.net/weixin_40641725/article/details/114636779&#34;&gt;https://blog.csdn.net/weixin_40641725/article/details/114636779&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;[2] &lt;a href=&#34;https://zhuanlan.zhihu.com/p/166425946&#34;&gt;https://zhuanlan.zhihu.com/p/166425946&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python函数参数中的“*”</title>
      <link>/post/2021/06/17/blog/</link>
      <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/06/17/blog/</guid>
      <description>&lt;p&gt;Python中，*除了可用于乘法和乘方运算外，还可以把它放在函数形式参数的前面，用来传递多个参数或进行参数的拆解。下面简单介绍后者的用法。&lt;/p&gt;&#xA;&lt;h1 id=&#34;传递多参数&#34;&gt;传递多参数&lt;/h1&gt;&#xA;&lt;h3 id=&#34;demo1&#34;&gt;示例1&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def f(*x):&#xA;    print(x)&#xA;&#xA;f(1, 2, 3, 4)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;输出：(1, 2, 3, 4)&lt;/p&gt;&#xA;&lt;p&gt;可见，虽然在定义函数**f()**时，只用了一个形式参数x，但是由于*的存在，再调用该函数时，即便是传递多个参数，也会把多个参数当成一个变量x（这里当作元组处理）来处理。&lt;/p&gt;&#xA;&lt;h3 id=&#34;demo2&#34;&gt;示例2&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def f(**x):&#xA;    print(x)&#xA;    &#xA;f(a=1, b=2, c=3, d=4)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;输出：{&amp;lsquo;a&amp;rsquo;: 1, &amp;lsquo;b&amp;rsquo;: 2, &amp;lsquo;c&amp;rsquo;: 3, &amp;rsquo;d&amp;rsquo;: 4}&lt;/p&gt;&#xA;&lt;p&gt;**也可以接收多个参数，但是跟*不同的是，**接收带有key的参数，并且将多个key-value形式的参数转换成为一个字典。&lt;/p&gt;&#xA;&lt;h1 id=&#34;demo3&#34;&gt;拆分参数&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def f(*x):&#xA;    print(x)&#xA;&#xA;# Test 1&#xA;f(1, 2)&#xA;# Test 2&#xA;f((1, 2))&#xA;# Test 3&#xA;f(*(1, 2))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;三次调用的输出分别为：&lt;/p&gt;&#xA;&lt;p&gt;Test 1: (1, 2)&#xA;Test 2: ((1, 2),)&#xA;Test 3: (1, 2)&lt;/p&gt;&#xA;&lt;p&gt;Test 1的结果跟{#demo1}一样，此时的x为两个参数构成的元组。Test 2输入参数变成了一个由两个元素构成的元组，此时的x把这个元组当成一个整体作为它的第一个元素，形成了一个新的元组。Test 3在传递参数时，前面添加了*，此时函数f中的x为输入的元组本身，效果与Test 1相同。&lt;/p&gt;</description>
    </item>
    <item>
      <title>医学影像技术笔记-01-DICOM文件方向</title>
      <link>/post/2021/06/02/blog/</link>
      <pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/06/02/blog/</guid>
      <description>&lt;p&gt;本文为B站up主&lt;a href=&#34;https://space.bilibili.com/475985153?spm_id_from=333.788.b_765f7570696e666f.1&#34;&gt;@智能医学成像-贾广&lt;/a&gt;相关视频的笔记。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;DICOM&lt;/strong&gt; (Digital Imaging and Communications in Medicine) 是医学成像领域通用的数据格式，被广泛应用于各种医学成像设备当中，包括但不限于CT、超声、核磁共振等设备。&lt;/p&gt;&#xA;&lt;h1 id=&#34;dicom文件方向&#34;&gt;DICOM文件方向&lt;/h1&gt;&#xA;&lt;p&gt;DICOM文件以病人为中心，它的指向或朝向（orientation）通过头文件中的一些字段标识。这些字段包括：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;(0x0008, 0x5100), Patient Position&lt;/p&gt;&#xA;&lt;p&gt;(0x0020, 0x0032), Image Position&lt;/p&gt;&#xA;&lt;p&gt;(0x0020, 0x0037), Image Orientation&lt;/p&gt;&#xA;&lt;p&gt;(0x0028, 0x0030), Pixel Spacing&lt;/p&gt;&#xA;&lt;p&gt;(0x0018, 0x0050), Slice Thickness&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;tag-0x0008-0x5100&#34;&gt;Tag: (0x0008, 0x5100)&lt;/h3&gt;&#xA;&lt;p&gt;用来记录病人进入扫描仪中的朝向或姿势。它的值为**[H | F] F { [P | S] | D[R | L] }&lt;strong&gt;。&lt;/strong&gt;[ ]&lt;strong&gt;或&lt;/strong&gt;{ }&lt;strong&gt;限定取值范围，&lt;/strong&gt;｜&lt;strong&gt;表示在&lt;/strong&gt;[ ]&lt;strong&gt;限定的范围内二者取其一。&lt;/strong&gt;[H | F]F&lt;strong&gt;表示头或脚先进入扫描仪，&lt;/strong&gt;[P | S]**表示面朝上或下，**D[R | L]**表示侧卧面朝右或左。例如，&lt;em&gt;HFP表示病人头部先进入扫描仪，并且面朝上&lt;/em&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;tag-0x0020-0x0032&#34;&gt;Tag: (0x0020, 0x0032)&lt;/h3&gt;&#xA;&lt;p&gt;描述图像&lt;strong&gt;第一个像素&lt;/strong&gt;（左上角）的坐标(x, y, z)。这里以&lt;strong&gt;病人&lt;/strong&gt;为中心，x的正方向表示病人的左边，y的正方向表示病人的后边，z的正方向表示病人的上面。&lt;/p&gt;&#xA;&lt;h3 id=&#34;tag-0x0020-0x0037&#34;&gt;Tag: (0x0020, 0x0037)&lt;/h3&gt;&#xA;&lt;p&gt;该字段包含6个不超过16字节的数字，前三个表示图像矩阵从左往右的方向与图像坐标轴x、y和z的余弦值，后三个表示图像矩阵从上往下的方向与坐标轴x、y和z的余弦值。&lt;/p&gt;&#xA;&lt;p&gt;例如图1，该文件在(0x0020, 0x0037)处的值为&lt;em&gt;0020,0037,Image Orientation (Patient)=1e-016\1\0\0.00523601152635\-1e-016\-0.9999862919977&lt;/em&gt;，近似为**(0, 1, 0, 0, 0, -1)&lt;strong&gt;表示图像从左往右的方向为病人从前往后的方向，即图像的右侧为病人的后侧（第二位为+1）；图像从上往下的方向为病人从上往下的方向，及图像的下面，就是病人的下面（第六位为-1）。当然，这里的示例数据是&lt;/strong&gt;矢状位**扫描的，图像的朝向和病人位置的关系比较明显，但对于冠状位采集的影像，通过该字段可以确认影像左右与病人左右的对应关系。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Singularity-03-创建镜像</title>
      <link>/post/2021/06/01/blog/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/06/01/blog/</guid>
      <description>&lt;p&gt;在Windows 10的Linux子系统（&lt;strong&gt;WLS&lt;/strong&gt;）中安装singularity(version=2.6.0)，并创建镜像。&lt;/p&gt;&#xA;&lt;p&gt;在之前多次尝试中发现，在直接创建.simg镜像时会报告错误（Error: no more available loop devices.），导致创建失败。尝试发现可以通过添加**&amp;ndash;sandbox**参数解决。完整命令如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo singularity build --sandbox image_name library/recipes&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;其中，image_name为镜像的名称，library/recipes可以为shub，docker链接或符合singularity语法的配置文件（config.def）。如果在wsl中，输入上述命令后，提示无法找到此命令，而直接输入singularity可以正常显示相关信息。那么可以为singularity创建链接文件解决。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo ln -s /usr/local/singularity/bin/singularity /usr/bin/singularit&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;配置文件实例：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Bootstrap: yum&#xA;&#xA;OSVersion: 7&#xA;&#xA;MirrorURL: http://mirror.centos.org/centos-%{OSVERSION}/%{OSVERSION}/os/$basearch/&#xA;&#xA;Include: yum&#xA;&#xA;%labels&#xA;&#xA;    Python version: 3.9.5&#xA;&#xA;    R version: 4.1.0&#xA;&#xA;&#xA;%post&#xA;&#xA;    yum -y update&#xA;&#xA;    yum -y groupinstall &amp;quot;Development Tools&amp;quot;&#xA;&#xA;    yum install -y gcc gcc-c++ gcc-gfortran java-1.8.0-openjdk.x86_64 java-1.8.0-openjdk-devel.x86_64&#xA;&#xA;    yum install -y readline-devel bzip2-devel libXt-devel fonts-chinese tcl tcl-devel tclx tk tk-devel mesa-libGLU mesa-libGLU-devel libcurl libcurl-devel xz-devel.x86_64 libjpeg-devel pcre2-devel libtiff-devel libicu-devel which vim&#xA;&#xA;%environment&#xA;&#xA;    export LC_ALL=C&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;奇怪的是，如果把配置文件的名称改为demo.def或test.def，则无法创建镜像。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux-sudo xxx 无法找到命令</title>
      <link>/post/2021/05/31/blog/</link>
      <pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/05/31/blog/</guid>
      <description>&lt;h3 id=&#34;问题描述&#34;&gt;问题描述&lt;/h3&gt;&#xA;&lt;p&gt;安装singularity后，将其安装路径通过.bashrc文件添加进PATH，并重新载入.bashrc. 尝试运行singularity，正常可用。但运行sudo singularity时，提示无法找到此命令。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;singularity version: 2.6.0-dist&lt;/p&gt;&#xA;&lt;p&gt;install path: /usr/local/singularity&lt;/p&gt;&#xA;&lt;p&gt;OS version: CentOS 7&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;解决方法&#34;&gt;解决方法&lt;/h3&gt;&#xA;&lt;p&gt;在/usr/bin中创建singularity的连接文件即可。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo ln -s /usr/local/singularity/bin/singularity /usr/bin/singularity&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;&#xA;&lt;p&gt;[1] &lt;a href=&#34;https://blog.csdn.net/tanmx219/article/details/86750322&#34;&gt;https://blog.csdn.net/tanmx219/article/details/86750322&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用CAT12可视化皮层Surface指标</title>
      <link>/post/2021/05/27/blog/</link>
      <pubDate>Thu, 27 May 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/05/27/blog/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://141.35.69.218/cat/index.html&#34;&gt;CAT12&lt;/a&gt;作为一种常用的神经影像数据处理和分析工具包，它提供了很多实用的功能，包括但不限于完整的VBM和SBM分析模块以及相关的统计模块。这里简单记录一下笔者使用&lt;a href=&#34;http://141.35.69.218/cat/index.html&#34;&gt;CAT12&lt;/a&gt;在显示皮层厚度时遇到的问题和相应的解决方法。&lt;/p&gt;&#xA;&lt;h3 id=&#34;问题描述&#34;&gt;问题描述&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://141.35.69.218/cat/index.html&#34;&gt;CAT12&lt;/a&gt;的GUI窗口中有个&lt;strong&gt;Display Surface&lt;/strong&gt;的按钮（图1），可以在窗口中通过选择并显示相应的.gii文件（可以显示的文件有&lt;strong&gt;surf/[r|l]h.[sphere|central].name.gii&lt;/strong&gt;）。但是对于重采样后的皮层指标，例如皮层厚度thickness (文件名为&lt;strong&gt;surf/s[fwhm].mesh.thickness.resampled.name.gii&lt;/strong&gt;)，却不能通过相同的方式去显示。&lt;/p&gt;&#xA;&lt;center&gt;&#xA;    &lt;img style=&#34;width:50%;&#34; &#xA;    src=&#34;img/01.png&#34;&gt;&#xA;    &lt;br&gt;&#xA;    &lt;div style=&#34;color:orange; border-bottom: 1px solid #d9d9d9;&#xA;    display: inline-block;&#xA;    color: #999;&#xA;    padding: 2px;&#34;&gt;图1. CAT12图形化界面&lt;/div&gt;&#xA;&lt;/center&gt;&#xA;&lt;h3 id=&#34;解决方法&#34;&gt;解决方法&lt;/h3&gt;&#xA;&lt;p&gt;首先查询CAT12手册，但是手册中并没有相关的描述。进而在CAT12帮助界面中查找。发现在&lt;strong&gt;Surface tools&lt;/strong&gt;中有关于可视化皮层数据的相关函数的介绍和演示（图2）。&lt;/p&gt;&#xA;&lt;center&gt;&#xA;    &lt;img style=&#34;width:50%;&#34; &#xA;    src=&#34;img/02.png&#34;&gt;&#xA;    &lt;br&gt;&#xA;    &lt;div style=&#34;color:orange; border-bottom: 1px solid #d9d9d9;&#xA;    display: inline-block;&#xA;    color: #999;&#xA;    padding: 2px;&#34;&gt;图2. CAT12帮助界面&lt;/div&gt;&#xA;&lt;/center&gt;&#xA;&lt;p&gt;随后确定&lt;strong&gt;cat_surf_display&lt;/strong&gt;函数可以进行皮层指标的可视化，同时GUI中的&lt;strong&gt;Display Surface&lt;/strong&gt;按钮调用的也是这个函数。通过&lt;strong&gt;help cat_surf_display&lt;/strong&gt;查看该函数的说明，确定函数的输入参数以及参数的格式。最终，用于可视化皮层厚度的代码如下：&lt;/p&gt;&#xA;&lt;p&gt;皮层厚度文件为&lt;strong&gt;surf/s15.mesh.thickness.resampled.anat.gii&lt;/strong&gt;，显示效果如图3。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;cat_surf_display(struct(&#39;data&#39;, &#39;surf/s15.mesh.thickness.resampled.anat.gii&#39;, &#39;usefsaverage&#39;, 1, &#39;multisurf&#39;, 1, &#39;dpi&#39;, 1500, &#39;caxis&#39;, [0, 3], &#39;colormap&#39;, &#39;autumn&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;center&gt;&#xA;    &lt;img style=&#34;width:50%;&#34; &#xA;    src=&#34;img/03.png&#34;&gt;&#xA;    &lt;br&gt;&#xA;    &lt;div style=&#34;color:orange; border-bottom: 1px solid #d9d9d9;&#xA;    display: inline-block;&#xA;    color: #999;&#xA;    padding: 2px;&#34;&gt;图3. 皮层厚度显示效果&lt;/div&gt;&#xA;&lt;/center&gt;&#xA;&lt;p&gt;另外，可以在弹出的绘图窗口上，右键单击来调整显示的参数和保存图片（图4）。&lt;/p&gt;&#xA;&lt;center&gt;&#xA;    &lt;img style=&#34;width:50%;&#34; &#xA;    src=&#34;img/04.png&#34;&gt;&#xA;    &lt;br&gt;&#xA;    &lt;div style=&#34;color:orange; border-bottom: 1px solid #d9d9d9;&#xA;    display: inline-block;&#xA;    color: #999;&#xA;    padding: 2px;&#34;&gt;图4. 显示参数调节&lt;/div&gt;&#xA;&lt;/center&gt;&#xA;&lt;h3 id=&#34;相关连接&#34;&gt;相关连接&lt;/h3&gt;&#xA;&lt;p&gt;[1] http://141.35.69.218/cat/index.html&lt;/p&gt;</description>
    </item>
    <item>
      <title>全屏模式Dock栏不消失</title>
      <link>/post/2021/05/26/blog/</link>
      <pubDate>Wed, 26 May 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/05/26/blog/</guid>
      <description>&lt;h3 id=&#34;环境&#34;&gt;环境&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;OS: MacOS Catalina (10.15.7)&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;正常情况是无论Dock是否设置自动隐藏，在全屏模式下，它都会自动隐藏。这里采取的解决方法是重置Dock的默认设置，并重启Dock栏。&lt;/p&gt;&#xA;&lt;h3 id=&#34;操作&#34;&gt;操作&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;defaults write com.apple.dock autohide-delay -int 0&#xA;defaults write com.apple.dock autohide-time-modifier -float 1.0&#xA;killall Dock&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;&#xA;&lt;p&gt;[1] &lt;a href=&#34;https://blog.csdn.net/santa12138/article/details/111293518&#34;&gt;https://blog.csdn.net/santa12138/article/details/111293518&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Singularity-02-常见问题汇总</title>
      <link>/post/2021/05/20/blog/</link>
      <pubDate>Thu, 20 May 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/05/20/blog/</guid>
      <description>&lt;h3 id=&#34;error---base-home-directory-does-not-exist-within-the-container-brain&#34;&gt;ERROR  : Base home directory does not exist within the container: /brain&lt;/h3&gt;&#xA;&lt;p&gt;用沙盒模式创建镜像，然后以交互方式进入镜像后创建/brain目录。之后将沙盒格式的镜像打包为.img文件即可。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 创建沙盒镜像&#xA;singularity build --sandbox centos7 docker://centos:7&#xA;&#xA;# 以交互方式打开镜像&#xA;singularity shell --writable centos7/&#xA;Singularity: Invoking an interactive shell within container...&#xA;&#xA;# 镜像内创建缺失目录&#xA;Singularity centos7:~/envs&amp;gt; mkdir /brain&#xA;Singularity centos7:~/envs&amp;gt; exit&#xA;&#xA;# 重新打包镜像&#xA;singularity build centos7.img centos7/&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;error---home-directory-is-not-owned-by-calling-user-usrlocalsingularity-252&#34;&gt;ERROR  : Home directory is not owned by calling user: /usr/local/singularity-2.5.2&lt;/h3&gt;&#xA;&lt;p&gt;报错命令：singularity shell smriprep.simg&lt;/p&gt;&#xA;&lt;p&gt;解决方法：添加&amp;ndash;home xxx参数，这里必须是绝对路径。例如：singularity shell &amp;ndash;home /babri/sangf/Desktop/test/ smriprep.simg&lt;/p&gt;</description>
    </item>
    <item>
      <title>Singularity-01-安装</title>
      <link>/post/2021/05/19/blog/</link>
      <pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/05/19/blog/</guid>
      <description>&lt;p&gt;简单来讲，Singularity是一种可以跨平台执行的小型虚拟机。在数据分析时，首先往往要搭建运行环境，比如R，python等。为了保证结果的可靠性，通常要保证跨设备环境的一致性。但是在跨运算设备之间搭建相同的环境是一项比较麻烦的事情。因此，如果只搭建一次环境，就可以在各个设备上使用，就比较轻松了。Singularity和Docker就提供了这样的功能。笔者在这里使用Singularity&lt;a href=&#34;%5Bhttps://singularity.lbl.gov/index.html%5D&#34;&gt;1&lt;/a&gt;，版本为2.4.6。&lt;/p&gt;&#xA;&lt;h2 id=&#34;安装依赖库&#34;&gt;安装依赖库&lt;/h2&gt;&#xA;&lt;h3 id=&#34;ubuntu&#34;&gt;Ubuntu&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get update&#xA;sudo apt-get install python dh-autoreconf build-essential libarchive-dev&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;centos&#34;&gt;CentOS&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo yum update&#xA;sudo yum groupinstall &#39;Development Tools&#39;&#xA;sudo yum install libarchive-devel&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;编译安装&#34;&gt;编译安装&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;VER=2.4.6&#xA;wget https://github.com/singularityware/singularity/releases/download/$VER/singularity-$VER.tar.gz&#xA;tar xvf singularity-$VER.tar.gz&#xA;cd singularity-$VER&#xA;./autogen.sh&#xA;./configure --prefix=&amp;quot;/usr/local/singularity-${VER}&amp;quot;&#xA;make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;将**/usr/local/singularity-2.4.6/bin&lt;strong&gt;添加进&lt;/strong&gt;$PATH**并重新加载配置文件。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;export $PATH=/usr/local/singularity-2.4.6/bin:$PATH&amp;quot; &amp;gt; ~/.bashrc&#xA;source ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;center&gt;&#xA;    &lt;img style=&#34;width:50%;&#34;&#xA;    src=&#34;./img/iShot2021-05-19 10.37.27.png&#34;&gt;&#xA;    &lt;br&gt;&#xA;    &lt;div style=&#34;color:orange; border-bottom: 1px solid #d9d9d9;&#xA;    display: inline-block;&#xA;    color: #999;&#xA;    padding: 2px;&#34;&gt;图1. 显示singularity版本&lt;/div&gt;&#xA;&lt;/center&gt;&#xA;&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;</description>
    </item>
    <item>
      <title>作图-R语言中的冲击图(Alluvial)</title>
      <link>/post/2021/05/08/blog/</link>
      <pubDate>Sat, 08 May 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/05/08/blog/</guid>
      <description>&lt;p&gt;冲击图可以非常直观地描述一组观测值的多个离散变量的情况。&lt;/p&gt;&#xA;&lt;p&gt;R语言中生成冲击图需要依赖包&lt;strong&gt;ggalluvial&lt;/strong&gt;. 使用以下代码安装依赖包。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;install.packages(&amp;quot;ggalluvial&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;示例数据&#34;&gt;示例数据&lt;/h1&gt;&#xA;&lt;p&gt;这里用随机生成的虚拟数据作为示例数据&lt;strong&gt;data&lt;/strong&gt;。&lt;strong&gt;data&lt;/strong&gt;中每一行表示一个观测值。其中，每个观测值有三个维度的属性，分别是&lt;strong&gt;A&lt;/strong&gt;，&lt;strong&gt;B&lt;/strong&gt;和&lt;strong&gt;C&lt;/strong&gt;。对于&lt;strong&gt;A&lt;/strong&gt;属性，有&lt;strong&gt;3&lt;/strong&gt;个水平，分别是&lt;strong&gt;a1&lt;/strong&gt;，&lt;strong&gt;a2&lt;/strong&gt;和&lt;strong&gt;a3&lt;/strong&gt;。&lt;strong&gt;B&lt;/strong&gt;属性有&lt;strong&gt;2&lt;/strong&gt;个水平，&lt;strong&gt;C&lt;/strong&gt;属性有&lt;strong&gt;4&lt;/strong&gt;个水平。总共包含&lt;strong&gt;3000&lt;/strong&gt;个观测值。因此，&lt;strong&gt;data&lt;/strong&gt;的大小为&lt;strong&gt;3000*3&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data &amp;lt;- data.frame(&#xA;  id = seq(1:3000),&#xA;  A = rep(c(&#39;a1&#39;, &#39;a2&#39;, &#39;a3&#39;), 1000),&#xA;  B = rep(c(&#39;b1&#39;, &#39;b2&#39;), 1500),&#xA;  C = rep(c(&#39;c1&#39;, &#39;c2&#39;, &#39;c3&#39;, &#39;c4&#39;), 750)&#xA;)&#xA;knitr::kable(head(data))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: right&#34;&gt;id&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;A&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;B&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;C&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;a1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;b1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;c1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;a2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;b2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;c2&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;3&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;a3&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;b1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;c3&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;a1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;b2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;c4&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;5&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;a2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;b1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;c1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;6&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;a3&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;b2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;c2&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;将数据转换为长格式数据&lt;strong&gt;data_long&lt;/strong&gt;。&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tidyverse)&#xA;&#xA;data_long &amp;lt;- data %&amp;gt;%&#xA;  as_tibble() %&amp;gt;%&#xA;  pivot_longer(cols=c(A, B, C), names_to = &#39;X&#39;, values_to = &#39;Response&#39;) %&amp;gt;%&#xA;  group_by(X, Response)&#xA;&#xA;data_long %&amp;gt;%&#xA;  head() %&amp;gt;%&#xA;  knitr::kable()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: right&#34;&gt;id&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;X&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Response&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;A&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;a1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;B&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;b1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;C&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;c1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;A&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;a2&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;B&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;b2&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;C&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;c2&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;这里转换为长格式数据的目的在于将&lt;strong&gt;A&lt;/strong&gt;，&lt;strong&gt;B&lt;/strong&gt;和&lt;strong&gt;C&lt;/strong&gt;三个属性和它们的不同水平相互组合。其中&lt;strong&gt;X&lt;/strong&gt;表示不同的属性，将来在冲击图中作为&lt;strong&gt;x轴&lt;/strong&gt;。&lt;strong&gt;Response&lt;/strong&gt;为各属性的不同取值，在图中表示为每个柱子&lt;strong&gt;划分&lt;/strong&gt;的段。原始数据中的1行在长格式数据中被拆分成了3行。&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h1 id=&#34;绘图代码&#34;&gt;绘图代码&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggalluvial)&#xA;&#xA;ggplot(data_long,&#xA;       aes(x = X, stratum = Response, alluvium = id, fill = Response, label = Response)) +&#xA;  scale_x_discrete(expand = c(.1, .1)) +&#xA;  geom_flow() +&#xA;  geom_stratum(alpha = .5) +&#xA;  geom_text(stat = &amp;quot;stratum&amp;quot;, size = 4) +&#xA;  ylab(&#39;Number of subjects&#39;) +&#xA;  xlab(&#39;&#39;) +&#xA;  theme_classic()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;img src=&#34;/post/2021/05/08/blog/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&#xA;&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/qq_42458954/article/details/109106860&#34;&gt;https://blog.csdn.net/qq_42458954/article/details/109106860&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>文献笔记-大脑功能网络的分离与整合</title>
      <link>/post/2021/05/05/blog/</link>
      <pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/05/05/blog/</guid>
      <description>&lt;h3 id=&#34;title&#34;&gt;Title&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Segregated systems of human brain networks&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;&#xA;&lt;p&gt;RSFC &lt;strong&gt;within and between brain system&lt;/strong&gt; exhibits progressive difference across adulthood, even in the absence of disease.&lt;/p&gt;&#xA;&lt;p&gt;Increasing age is associated with decreasing connectivity within systems and increasing connectivity between brain systems.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;increasing age is accompanied by decreasing segregation&lt;/li&gt;&#xA;&lt;li&gt;different types of functional systems exhibit different trajectories of age-related differences in system segregation&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;With healthy adult , increasing segregation is associated with superior cognitive ability independently of influence of age.&lt;/p&gt;</description>
    </item>
    <item>
      <title>R语言基本统计</title>
      <link>/post/2021/05/04/blog/</link>
      <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/05/04/blog/</guid>
      <description>&lt;p&gt;本文为笔者在学习b站up主@&lt;a href=&#34;https://space.bilibili.com/43536169?spm_id_from=333.788.b_765f7570696e666f.1&#34;&gt;学术数据分析及可视化&lt;/a&gt;相关视频的笔记。文中只是笔者个人的理解，描述也只是便于自己理解。在使用相关内容时，还需要进一步查看相关的手册或帮助文档。&lt;/p&gt;&#xA;&lt;h1 id=&#34;相关&#34;&gt;相关&lt;/h1&gt;&#xA;&lt;p&gt;cor()用于计算两个向量的相关系数。ggm::pcor()用于计算偏相关系数。这两个函数只能计算相关系数。cor.test(), psych::cor.test和psych::pcor.test()分别计算相关系数和偏相关系数及其显著性检验的结果。&lt;/p&gt;&#xA;&lt;h1 id=&#34;差异性&#34;&gt;差异性&lt;/h1&gt;&#xA;&lt;h2 id=&#34;t检验&#34;&gt;t检验&lt;/h2&gt;&#xA;&lt;p&gt;t.test()用于进行独立样本或配对样本t检验。要求各组内方差相等。相应的非参数版本为wilcox.test()。&lt;/p&gt;&#xA;&lt;h2 id=&#34;方差分析&#34;&gt;方差分析&lt;/h2&gt;&#xA;&lt;p&gt;方差分析要求数据满足三个条件，分别是正态性、方差齐性和独立性。独立性一般在实验设计阶段考虑。这里只讨论前两个条件。&lt;/p&gt;&#xA;&lt;h3 id=&#34;对正态性的检验&#34;&gt;对正态性的检验&lt;/h3&gt;&#xA;&lt;p&gt;数据是否满足正态性可以通过直方图hist(), qq图qqplot()和shapiro.test()进行检验。其中shapiro.test()检验的零假设为数据满足正态性。&lt;/p&gt;&#xA;&lt;h3 id=&#34;对方差齐性的检验&#34;&gt;对方差齐性的检验&lt;/h3&gt;&#xA;&lt;p&gt;方差齐性检验可以通过bartlett.test(), leveneTest()和fligner.test()进行。它们的零假设均为各组方差相等。&lt;/p&gt;&#xA;&lt;h3 id=&#34;单多因素方差分析anova&#34;&gt;单/多因素方差分析(ANOVA)&lt;/h3&gt;&#xA;&lt;p&gt;使用aov()。TukeyHSD()用于进行事后检验/多重比较。&lt;/p&gt;&#xA;&lt;h3 id=&#34;单多因素重复测量方差分析ancova&#34;&gt;单/多因素重复测量方差分析(ANCOVA)&lt;/h3&gt;&#xA;&lt;p&gt;aov(y~x+Error(subjects/Group))&lt;/p&gt;&#xA;&lt;h3 id=&#34;非参数方差分析&#34;&gt;非参数方差分析&lt;/h3&gt;&#xA;&lt;p&gt;其中一种利用重采样的方法使用lmPerm::aovp()，用法与aov()类似。&lt;/p&gt;&#xA;&lt;h1 id=&#34;回归&#34;&gt;回归&lt;/h1&gt;&#xA;&lt;h2 id=&#34;回归拟合&#34;&gt;回归拟合&lt;/h2&gt;&#xA;&lt;p&gt;lm()。&#xA;拟合通常用于数据可视化，涉及两个变量之间的关系。目的是找到两个变量之间最合适的关系。&#xA;评价模型好坏的指标有残差标准误$\sqrt{\frac{sum(residual^2)}{n-p-1}}$和决定系数$R^2=1-\frac{RSS}{TSS}$。&#xA;anova(fit, fitnull)可以比较拟合模型与零模型之间是否有差异。零模型一般为$\hat{y}=mean(y)$。&#xA;包aomisc提供了许多不同函数的拟合函数。以线性和指数函数拟合为例。&lt;/p&gt;&#xA;&lt;h3 id=&#34;线性多项式&#34;&gt;线性/多项式&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;\(y=a+bx+cx^2\)&lt;/code&gt;&#xA;drm(y&lt;del&gt;x, fct=DRC.poly2())等价于lm(y&lt;/del&gt;x+I(x^2)).&lt;/p&gt;&#xA;&lt;h3 id=&#34;指数&#34;&gt;指数&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;\(y=a*exp(k*x)\)&lt;/code&gt;&#xA;drm(y~x, fct=DRC.expoDecay())&lt;/p&gt;&#xA;&lt;h2 id=&#34;回归分析&#34;&gt;回归分析&lt;/h2&gt;&#xA;&lt;p&gt;回归分析通常用于模型构建预测等，可以包含多个变量。&lt;/p&gt;&#xA;&lt;h3 id=&#34;一般线性模型&#34;&gt;一般线性模型&lt;/h3&gt;&#xA;&lt;p&gt;lm().&#xA;AIC()用于比较模型的好坏，值越小模型越好。也可以用anova()对两个模型是否存在差异进行检验。&#xA;MASS::stepAIC(), leaps::resubsets()和car::subsets()可以筛选纳入模型的变量。car::vif()可以计算自变量的膨胀系数，值越大表示与其他变量的共线性更强。&lt;/p&gt;&#xA;&lt;h3 id=&#34;广义线性模型&#34;&gt;广义线性模型&lt;/h3&gt;&#xA;&lt;p&gt;把因变量按照特定的分布进行转换，以符合特定的概率分布，再利用该分布进行预测。glm()，需要指定函数分布族family。高斯分布的glm与lm的结果是相同的。&#xA;当响应变量为分类变量时，采用logistic（二分类）。glm(formula, data, family=binomial(&amp;rsquo;logit&amp;rsquo;))。涉及三分类及以上时，可以用nnet::multinom()进行建模分析。&lt;/p&gt;&#xA;&lt;h3 id=&#34;线性混合模型&#34;&gt;线性混合模型&lt;/h3&gt;&#xA;&lt;p&gt;nlme和lme4包提供了相关的函数。nlme::lme(), lme4::lmer(). Eg. lme(Richness~NAP, random=&lt;del&gt;1|Beach, data) or lmer(Richness&lt;/del&gt;NAP+1|Beach, data).&lt;/p&gt;&#xA;&lt;h3 id=&#34;广义线性混合模型&#34;&gt;广义线性混合模型&lt;/h3&gt;&#xA;&lt;p&gt;lme4::glmer()和glmmADMB::glmmadmb()提供了相关的建模函数。&lt;/p&gt;&#xA;&lt;h3 id=&#34;其他&#34;&gt;其他&lt;/h3&gt;&#xA;&lt;p&gt;其他还包括贝叶斯回归模型、广义非线性模型和广义非线性混合模型。&lt;/p&gt;&#xA;&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;&#xA;&lt;p&gt;B站UP主@&lt;a href=&#34;https://space.bilibili.com/43536169?spm_id_from=333.788.b_765f7570696e666f.1&#34;&gt;学术数据分析及可视化&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>作图-ggplot2中的直方图和条形图</title>
      <link>/post/2021/04/19/blog/</link>
      <pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/04/19/blog/</guid>
      <description>&lt;p&gt;本文用于记录ggplot2作图相关的代码，会不定期更新。&lt;/p&gt;&#xA;&lt;p&gt;示例数据格式为&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tidyverse)&#xA;&#xA;data &amp;lt;- read.csv(&#39;./test.csv&#39;) %&amp;gt;%&#xA;  as_tibble()&#xA;data %&amp;gt;%&#xA;  head() %&amp;gt;%&#xA;  knitr::kable()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: right&#34;&gt;ID&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Gender&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: right&#34;&gt;Age&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Education&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;M&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;6&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;M&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;F&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;M&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;3&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;F&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;12&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;M&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;F&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;19&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;H&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;5&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;F&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;L&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;6&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;F&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;M&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h1 id=&#34;直方图&#34;&gt;直方图&lt;/h1&gt;&#xA;&lt;p&gt;..density..: 指明y轴为频率值，为ggplot2内置的变量。&lt;/p&gt;&#xA;&lt;p&gt;geom_vline: 添加竖直线，线与x轴的交点由xintercept指定。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data %&amp;gt;%&#xA;  ggplot(aes(x=Age, y=..density..)) +&#xA;  geom_histogram(stat = &#39;bin&#39;) +&#xA;  geom_vline(xintercept=mean(data$Age), linetype=&#39;dashed&#39;, color=&#39;blue&#39;) +&#xA;  ylab(&#39;Density&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;img src=&#34;/post/2021/04/19/blog/index_files/figure-html/histogram-1.png&#34; width=&#34;672&#34; /&gt;&#xA;&lt;h1 id=&#34;条形图&#34;&gt;条形图&lt;/h1&gt;&#xA;&lt;p&gt;ggplot2的条形图，每个柱子的高度直接跟输入数据中的某一列对应，其中一个值会产生一个柱子。这跟seaborn包中catplot的逻辑不太一样：它接受一组数对应一个柱子，因此可以自动生成误差线，而不用单独添加。但也可以自定义函数，将数据转换和作图封装起来，达到类似seaborn中catplot的效果&lt;/p&gt;&#xA;&lt;p&gt;geom_errorbar: 为每个柱子添加&lt;strong&gt;标准差线&lt;/strong&gt;，也可以给&lt;strong&gt;折线图&lt;/strong&gt;的每个点添加。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data %&amp;gt;%&#xA;  group_by(Gender) %&amp;gt;%&#xA;  mutate(&#xA;    value=mean(Age),&#xA;    sd=sd(Age)&#xA;  ) %&amp;gt;%&#xA;  ggplot(aes(x=Gender, y=value, fill=Gender)) +&#xA;  geom_col(position = &amp;quot;dodge&amp;quot;, width = 0.3) + &#xA;  geom_errorbar(aes(ymin = value-sd, ymax = value+sd), &#xA;                position = position_dodge(0.9), width = .05) +&#xA;  ylab(&#39;Age&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;img src=&#34;/post/2021/04/19/blog/index_files/figure-html/barplot-1.png&#34; width=&#34;672&#34; /&gt;&#xA;&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://semba-blog.netlify.app/03/25/2020/barplot-with-errorbar-in-ggplot2/&#34;&gt;https://semba-blog.netlify.app/03/25/2020/barplot-with-errorbar-in-ggplot2/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.sthda.com/english/wiki/ggplot2-barplots-quick-start-guide-r-software-and-data-visualization&#34;&gt;http://www.sthda.com/english/wiki/ggplot2-barplots-quick-start-guide-r-software-and-data-visualization&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>文献笔记-大脑功能网络中体现的左右半球和性别差异</title>
      <link>/post/2021/04/18/blog/</link>
      <pubDate>Sun, 18 Apr 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/04/18/blog/</guid>
      <description>&lt;h3 id=&#34;title&#34;&gt;Title&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Hemisphere- and gender-related differences in small-world brain networks: A resting-state functional MRI study&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;results&#34;&gt;Results&lt;/h3&gt;&#xA;&lt;p&gt;Male have a large normalized clustering coefficient in the right hemispheric network, but a lower clustering coefficient in the left hemispheric network.&lt;/p&gt;&#xA;&lt;p&gt;Significant hemisphere-related differences in the regional nodal characteristics: frontal and occipital regions (leftward asymmetry), temporal regions (rightward asymmetry).&lt;/p&gt;&#xA;&lt;h3 id=&#34;conclustions&#34;&gt;Conclustions&lt;/h3&gt;&#xA;&lt;p&gt;Topological organization of human brain functional networks is associated with gender and hemispheres.&lt;/p&gt;</description>
    </item>
    <item>
      <title>文献笔记-抑郁症大脑功能网络拓扑属性的改变</title>
      <link>/post/2021/04/16/blog/</link>
      <pubDate>Fri, 16 Apr 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/04/16/blog/</guid>
      <description>&lt;h3 id=&#34;title&#34;&gt;Title&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Disrupted Brain Connectivity Networks in Drug-Naive, First-Episode Major Depressive Disorder&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;results&#34;&gt;Results&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;MDD患者表现出了全局属性的改变：更短的最短路径长度和更高的全局效率→朝着随机网络转变；&lt;/li&gt;&#xA;&lt;li&gt;尾状核和默认网络脑区中心性在MDD组中增加；&lt;/li&gt;&#xA;&lt;li&gt;枕叶、眶额和颞叶脑区中心性下降；&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;conclustions&#34;&gt;Conclustions&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;MDD is associated with disruptions in the topological organization of functional brain networks;&lt;/li&gt;&#xA;&lt;li&gt;Disruption in the topological organization may contribute to disturbances in mood and cognition in MDD;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;网络稀疏性选择标准：(1) 网络平局度&amp;gt;2*log(N)，N为网络节点数；(2) 小世界属性大于1.1；&lt;/li&gt;&#xA;&lt;li&gt;AUC指标提供了独立与单个稀疏性下的综合度量，summaried scale;&lt;/li&gt;&#xA;&lt;li&gt;NBS, Network-based statistic, 对网络中的连边进行统计的方法；&lt;/li&gt;&#xA;&lt;li&gt;Nonparametric permutation test;&lt;/li&gt;&#xA;&lt;li&gt;Combination of high local clustering and short path length supports the two fundamental organizational principles in the brain: functional segregation and functional integration;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://doi.org/10.1016/j.biopsych.2011.05.018&#34;&gt;https://doi.org/10.1016/j.biopsych.2011.05.018&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>什么是效应量？</title>
      <link>/post/2021/04/14/blog/</link>
      <pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/04/14/blog/</guid>
      <description>&lt;p&gt;统计当中，假设检验和P值可以给我们提供关于假设为真的可能性。例如双样本t检验可以报告两组样本所对应总体均值存在差异的可能性。若可能性小于一个比较小的值（通常设置为0.05），那我们认为在&lt;em&gt;一次&lt;/em&gt;试验中，小概率事件不可能发生，所以拒绝零假设成立。但是我们只是知道了这两组有多大的概率相等，并不知道两组具体有多大的差异。因此我们需要引入效应量的概念。&lt;/p&gt;&#xA;&lt;h3 id=&#34;什么是效应量&#34;&gt;什么是效应量&lt;/h3&gt;&#xA;&lt;p&gt;简单来讲，效应量是用来量化变量之间关系或差异具体有多大或多小的指标。其是通过样本计算得到的。&lt;/p&gt;&#xA;&lt;h3 id=&#34;如何计算&#34;&gt;如何计算&lt;/h3&gt;&#xA;&lt;p&gt;效应量大致分为两种类型：(1)量化变量之间&lt;strong&gt;关系&lt;/strong&gt;的，也被称为&lt;em&gt;r family&lt;/em&gt;, 和(2)量化变量之间&lt;strong&gt;差异&lt;/strong&gt;的，也被称为&lt;em&gt;d family&lt;/em&gt;。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;R family&lt;/strong&gt;有&lt;em&gt;Pearson&lt;/em&gt;相关系数和$r^2$等。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;D family&lt;/strong&gt;有&lt;em&gt;Cohen&amp;rsquo;s d&lt;/em&gt;, 优势比和相对风险率等。其中&lt;em&gt;Cohen&amp;rsquo;s d&lt;/em&gt;计算公式如下，&lt;/p&gt;&#xA;&lt;p&gt;$$&#xA;Cohen&amp;rsquo;s d=(\mu_1-\mu_2)/s,&#xA;$$&#xA;$$&#xA;s=\sqrt{\frac{(n_1-1)*s_1^2+(n_2-1)*s_2^2}{(n_1+n_2-2)}}&#xA;$$&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;\(s_1\)&lt;/code&gt;和$s_2$分别表示两个样本的标准差。&lt;/p&gt;&#xA;&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.atyun.com/23635.html&#34;&gt;http://www.atyun.com/23635.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.iikx.com/news/statistics/1827.html&#34;&gt;https://www.iikx.com/news/statistics/1827.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>fMRI上广义线性模型建模简述</title>
      <link>/post/2021/04/09/blog/</link>
      <pubDate>Fri, 09 Apr 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/04/09/blog/</guid>
      <description>&lt;p&gt;在对&lt;strong&gt;fMRI&lt;/strong&gt;数据，尤其是&lt;strong&gt;task-fMRI&lt;/strong&gt;数据进行分析的时候，利用广义线性模型进行建模是很重要的一步。这里简单记录一下自己关于这部分的理解。&lt;/p&gt;&#xA;&lt;p&gt;我们的大脑每时每刻都在活动，也就造成了&lt;u&gt;&lt;strong&gt;血氧水平的变化（BOLD）&lt;/strong&gt;&lt;/u&gt;。理论上在接收到刺激以后，大脑BOLD信号的变化符合&lt;u&gt;&lt;strong&gt;血氧动力学函数（HRF）&lt;/strong&gt;&lt;/u&gt;。但是考虑到各种因素，最终大脑的变化是非常复杂的。磁共振技术可以用来收集大脑的&lt;strong&gt;BOLD&lt;/strong&gt;信号。在每个&lt;strong&gt;TR&lt;/strong&gt;内，都会生成一个全脑或者一定范围内大脑活动的三维图像。对于其中的一个体素来说，假设它的信号为**$y$**。这里只考虑一种刺激条件的情况。如图1所示。&lt;/p&gt;&#xA;&lt;center&gt;&#xA;    &lt;img style=&#34;width:50%;&#34; &#xA;    src=&#34;index.assets/1543711-20200921120755906-920246107.png&#34;&gt;&#xA;    &lt;br&gt;&#xA;    &lt;div style=&#34;color:orange; border-bottom: 1px solid #d9d9d9;&#xA;    display: inline-block;&#xA;    color: #999;&#xA;    padding: 2px;&#34;&gt;图2. 理论上，BOLD信号和体素y信号的关系。&lt;/div&gt;&#xA;&lt;/center&gt;&#xA;&lt;p&gt;当给予刺激之后，根据刺激的时间、时长和HRF，我们可以估计出某个体素理论上的BOLD信号。然后在这段时间内进行采样，就可以得到一系列的**$y$&lt;strong&gt;和对应理论上的BOLD信号&lt;/strong&gt;$x$&lt;strong&gt;（图2）。通过广义线性模型，我们就可以估计出相应的系数&lt;/strong&gt;$\beta$**。&lt;/p&gt;&#xA;&lt;center&gt;&#xA;    &lt;img style=&#34;width:50%;&#34; &#xA;    src=&#34;index.assets/1543711-20200921120811421-347078361.png&#34;&gt;&#xA;    &lt;br&gt;&#xA;    &lt;div style=&#34;color:orange; border-bottom: 1px solid #d9d9d9;&#xA;    display: inline-block;&#xA;    color: #999;&#xA;    padding: 2px;&#34;&gt;图2. 通过采样之后BOLD信号和体素y信号的关系&lt;/div&gt;&#xA;&lt;/center&gt;</description>
    </item>
    <item>
      <title>移动硬盘图标异常</title>
      <link>/post/2021/04/08/blog/</link>
      <pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/04/08/blog/</guid>
      <description>&lt;p&gt;&lt;u&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/u&gt;：访达侧边栏移动硬盘的图标显示如图1，感觉是不正常的显示。图2为正常显示的图标。&lt;/p&gt;&#xA;&lt;p&gt;&lt;u&gt;&lt;strong&gt;环境&lt;/strong&gt;&lt;/u&gt;：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;macOS: Big Sur 11.2.3&#xA;移动硬盘：希捷&#xA;iRightMouse: 2.1.1&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;center&gt;&#xA;    &lt;img style=&#34;width:50%;&#34; &#xA;    src=&#34;index.assets/image-20210408131532558.png&#34;&gt;&#xA;    &lt;br&gt;&#xA;    &lt;div style=&#34;color:orange; border-bottom: 1px solid #d9d9d9;&#xA;    display: inline-block;&#xA;    color: #999;&#xA;    padding: 2px;&#34;&gt;图1. 显示异常的图标&lt;/div&gt;&#xA;&lt;/center&gt;&#xA;&lt;center&gt;&#xA;    &lt;img style=&#34;width:50%;&#34; &#xA;    src=&#34;index.assets/image-20210408131838865.png&#34;&gt;&#xA;    &lt;br&gt;&#xA;    &lt;div style=&#34;color:orange; border-bottom: 1px solid #d9d9d9;&#xA;    display: inline-block;&#xA;    color: #999;&#xA;    padding: 2px;&#34;&gt;图2. 正常显示的图标&lt;/div&gt;&#xA;&lt;/center&gt;&#xA;&lt;p&gt;&lt;u&gt;&lt;strong&gt;解决方案&lt;/strong&gt;&lt;/u&gt;：在&lt;u&gt;&lt;strong&gt;系统偏好设置&lt;/strong&gt;&lt;/u&gt;里面的&lt;u&gt;&lt;strong&gt;扩展&lt;/strong&gt;&lt;/u&gt;模块，把&lt;u&gt;&lt;strong&gt;新近安装&lt;/strong&gt;&lt;/u&gt;的访达扩展&lt;u&gt;&lt;strong&gt;取消勾选&lt;/strong&gt;&lt;/u&gt;即可（图3）。本机问题为超级右键的扩展导致的。取消勾选即可恢复正常的磁盘图标。但是取消之后，相关软件在访达里面的扩张功能也就没办法使用了。请自行斟酌。&lt;/p&gt;&#xA;&lt;center&gt;&#xA;    &lt;img style=&#34;width:50%;&#34; &#xA;    src=&#34;index.assets/image-20210408131635329.png&#34;&gt;&#xA;    &lt;br&gt;&#xA;    &lt;div style=&#34;color:orange; border-bottom: 1px solid #d9d9d9;&#xA;    display: inline-block;&#xA;    color: #999;&#xA;    padding: 2px;&#34;&gt;图3. 操作顺序&lt;/div&gt;&#xA;&lt;/center&gt;&#xA;&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://discussionschinese.apple.com/thread/252297105&#34;&gt;https://discussionschinese.apple.com/thread/252297105&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>全屏模式下iTerm2标题栏闪动</title>
      <link>/post/2021/04/07/blog/</link>
      <pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/04/07/blog/</guid>
      <description>&lt;h2 id=&#34;起因&#34;&gt;起因&lt;/h2&gt;&#xA;&lt;p&gt;在更新&lt;strong&gt;BigSur&lt;/strong&gt;之后的某一天，突然发现&lt;strong&gt;iTerm2&lt;/strong&gt;在全屏模式下，顶部不时会出现一条白色的线闪动。后来在一个论坛里面看到有人说貌似是系统的问题。但是很奇怪，室友的电脑上就没有这样的情况。中间也试过重装系统（PS：强迫症重度患者），但还是会出现。&lt;/p&gt;&#xA;&lt;p&gt;通过排查，发现只有&lt;strong&gt;iTerm2&lt;/strong&gt;配色选择&lt;u&gt;&lt;em&gt;深色&lt;/em&gt;&lt;/u&gt;主题，并且&lt;strong&gt;系统&lt;/strong&gt;主题为&lt;u&gt;&lt;em&gt;浅色&lt;/em&gt;&lt;/u&gt;主题时，才会出现上述的问题。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;系统版本：macOS Big Sur 11.2.3&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;iTerm2版本：Build 3.4.4&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;解决&#34;&gt;解决&lt;/h2&gt;&#xA;&lt;p&gt;打开iTerm2&lt;u&gt;&lt;em&gt;偏好&lt;/em&gt;&lt;/u&gt;设置，选择&lt;u&gt;&lt;em&gt;高级&lt;/em&gt;&lt;/u&gt;。在&lt;u&gt;&lt;em&gt;文本框&lt;/em&gt;&lt;/u&gt;中输入&lt;u&gt;&lt;strong&gt;big sur&lt;/strong&gt;&lt;/u&gt;，把通用这一行改为&lt;u&gt;&lt;strong&gt;是&lt;/strong&gt;&lt;/u&gt;即可。如图1.&lt;/p&gt;&#xA;&lt;center&gt;&#xA;    &lt;img style=&#34;width:50%;&#34; &#xA;    src=&#34;index.assets/image-20210407201733987.png&#34;&gt;&#xA;    &lt;br&gt;&#xA;    &lt;div style=&#34;color:orange; border-bottom: 1px solid #d9d9d9;&#xA;    display: inline-block;&#xA;    color: #999;&#xA;    padding: 2px;&#34;&gt;图1. 操作顺序&lt;/div&gt;&#xA;&lt;/center&gt;&#xA;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/lxyoucan/article/details/115085694&#34;&gt;https://blog.csdn.net/lxyoucan/article/details/115085694&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://gitlab.com/gnachman/iterm2/-/issues/9199&#34;&gt;https://gitlab.com/gnachman/iterm2/-/issues/9199&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>利用blogdown建立个人博客</title>
      <link>/post/2021/04/04/blog/</link>
      <pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/04/04/blog/</guid>
      <description>&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;&#xA;&lt;p&gt;安装RStudio和R包blogdown。&lt;/p&gt;&#xA;&lt;h2 id=&#34;创建博客&#34;&gt;创建博客&lt;/h2&gt;&#xA;&lt;p&gt;在R终端中输入如下代码即可创建默认主题的博客。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;blogdown::new_site()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;另外也可以在RStudio中通过图形界面创建。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;鼠标点击File -&amp;gt; New Project&amp;hellip; -&amp;gt; New Directory -&amp;gt; Website using blogdown&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;在弹出的对话框的Directory name内输入本地存放项目的目录名。Create project as subdirectory of: 为项目的父目录。之后点击Create Project 按钮。Hugo theme为博客的主题。这里我们用默认主题。其他主题参考&lt;a href=&#34;https://themes.gohugo.io&#34;&gt;HUGO主题页面&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;img src=&#34;index.assets/image-20210404173021104.png&#34; style=&#34;width:50%;float:center;&#34;&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;在R终端中输入&lt;code&gt;blogdown::server_site()&lt;/code&gt;即可在本地部署博客。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;在gitee上部署博客&#34;&gt;在Gitee上部署博客&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;首先需要在gitee上创建仓库，并将Depoly directory更改为 &lt;strong&gt;“.”&lt;/strong&gt;（不带引号） 。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;img src=&#34;index.assets/image-20210404173840632.png&#34; style=&#34;width:50%;float:center;&#34;&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;在R终端中输入&lt;code&gt;blogdown::hugo_build(relativeURLs=TRUE)&lt;/code&gt;并运行。可以看到在home目录下生成了public。该目录下即为生成的博客静态页面。此时点击public/index.html是可以在浏览器查看的。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;将public中的文件同步到刚创建的gitee或github仓库中。使用的命令如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd public&#xA;git init&#xA;git add .&#xA;git commit -m &#39;first commit&#39;&#xA;git remote add origin xxxx.git&#xA;git push -f origin master&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;之后就可以通过访问username.gitee.io/home访问自己的博客了。&lt;/p&gt;&#xA;&lt;p&gt;至此，我们使用blogdown创建了自己的博客，并使用hugo生成了静态页面。最后通过gitee或github发布生成的静态页面。&lt;/p&gt;</description>
    </item>
    <item>
      <title>About Hugo Ivy</title>
      <link>/about/</link>
      <pubDate>Sun, 06 Aug 2017 00:00:00 +0000</pubDate>
      <guid>/about/</guid>
      <description>&lt;p&gt;This Hugo theme was ported from &lt;a href=&#34;https://github.com/dmulholland/ivy&#34;&gt;Ivy&lt;/a&gt;, a minimalist website generator built in Python. I don&amp;rsquo;t have time to document this theme. You have to read the source code to understand what it can do. All I can say for now is that I love it. It is clean, minimal, and responsive.&lt;/p&gt;&#xA;&lt;p&gt;I hope you will enjoy this theme. The source code is &lt;a href=&#34;https://github.com/yihui/hugo-ivy&#34;&gt;on Github&lt;/a&gt;. Happy hacking!&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
