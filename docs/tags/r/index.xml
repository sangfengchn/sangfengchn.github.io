<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Sang Feng | 桑峰</title>
    <link>/tags/r/</link>
    <description>Recent content in R on Sang Feng | 桑峰</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Apr 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/r/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>R语言中的异常处理：TryCatch</title>
      <link>/post/2024/04/08/trycatchinr/</link>
      <pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate>
      <guid>/post/2024/04/08/trycatchinr/</guid>
      <description>&lt;p&gt;因为需要在循环里面记录警告和报错对应的循环项。一开始的思路是用&lt;code&gt;warnings()&lt;/code&gt;获取警告信息，在获取后再用&lt;code&gt;warning(&#39;&#39;)&lt;/code&gt;清空警告信息。但在循环结束后，获取警告信息回返回包含多个元素的&lt;code&gt;list&lt;/code&gt;，似乎清空警告信息没有生效。另外，这种方法没办法处理报错。第二种尝试是使用&lt;code&gt;tryCatch()&lt;/code&gt;，虽然详细的原理还没弄明白，但目前也能实现一开始的需要了。因此记录一下。&lt;/p&gt;&#xA;&lt;h3 id=&#34;trycatch&#34;&gt;tryCatch&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# create a function maybe raise warning or error.&#xA;func &amp;lt;- function(x) {&#xA;  if (x %% 2 == 0) {&#xA;    warning(&#39;a&#39;)&#xA;  } else if (x %% 3 == 0) {&#xA;    stop(&#39;b&#39;)&#xA;  }&#xA;}&#xA;&#xA;# the loop&#xA;for (i in 1:10) {&#xA;  res &amp;lt;- tryCatch({&#xA;    func(i)&#xA;    print(&#39;Normal&#39;)&#xA;    &#39;Normal&#39;&#xA;    }, &#xA;    warning = function(w){&#xA;      priint(&#39;Warning&#39;)&#xA;     &#39;Warning&#39;&#xA;     }, &#xA;   error = function(e){&#xA;     print(&#39;Error&#39;)&#xA;     &#39;Error&#39;&#xA;     },&#xA;   finally = {&#xA;     print(&#39;Finally&#39;)&#xA;   })&#xA;  print(sprintf(&#39;x: %d, res: %s&#39;, i, res))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Normal&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 1, res: Normal&amp;quot;&#xA;## [1] &amp;quot;Error&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 2, res: Error&amp;quot;&#xA;## [1] &amp;quot;Error&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 3, res: Error&amp;quot;&#xA;## [1] &amp;quot;Error&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 4, res: Error&amp;quot;&#xA;## [1] &amp;quot;Normal&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 5, res: Normal&amp;quot;&#xA;## [1] &amp;quot;Error&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 6, res: Error&amp;quot;&#xA;## [1] &amp;quot;Normal&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 7, res: Normal&amp;quot;&#xA;## [1] &amp;quot;Error&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 8, res: Error&amp;quot;&#xA;## [1] &amp;quot;Error&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 9, res: Error&amp;quot;&#xA;## [1] &amp;quot;Error&amp;quot;&#xA;## [1] &amp;quot;Finally&amp;quot;&#xA;## [1] &amp;quot;x: 10, res: Error&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;观察输出，可以推测，先执行&lt;code&gt;func(i)&lt;/code&gt;，如果没有异常和报错，执行之后的代码。并在&lt;code&gt;tryCatch()&lt;/code&gt;结束前执行&lt;strong&gt;finally&lt;/strong&gt;；如果有异常或者报错，则直接执行对应的代码，并在&lt;code&gt;tryCatch()&lt;/code&gt;结束前执行&lt;strong&gt;finally&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>R包安装报错</title>
      <link>/post/2022/09/09/blog/</link>
      <pubDate>Fri, 09 Sep 2022 00:00:00 +0000</pubDate>
      <guid>/post/2022/09/09/blog/</guid>
      <description>&lt;h1 id=&#34;error-c14-standard-requested-but-cxx14-is-not-defined&#34;&gt;Error: C++14 standard requested but CXX14 is not defined&lt;/h1&gt;&#xA;&lt;p&gt;参考：https://www.zxzyl.com/archives/1283/&lt;/p&gt;&#xA;&lt;p&gt;升级gcc，并设置r包编译使用的gcc路径。&lt;/p&gt;&#xA;&lt;p&gt;设置方法：&lt;/p&gt;&#xA;&lt;p&gt;首先在～/.R目录下新建文件Makevars；&lt;/p&gt;&#xA;&lt;p&gt;将&lt;/p&gt;</description>
    </item>
    <item>
      <title>Weekly summary</title>
      <link>/post/2021/11/19/blog/</link>
      <pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/11/19/blog/</guid>
      <description>&lt;h2 id=&#34;自定义colormap&#34;&gt;自定义Colormap&lt;/h2&gt;&#xA;&lt;p&gt;在一些场景下，我们需要自己构造数字与颜色的对应关系。比如，我们在探究每个ROI随龄变化的趋势时，我们需要将回归方程中年龄的系数展示在脑图上。朴素的想法是，我构造一个关于系数与颜色的映射关系，给定某一系数，就返回相应的颜色。实现方法如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;library(tidyverse)&#xA;library(RColorBrewer)&#xA;&#xA;data &amp;lt;- data.frame(Val = rnorm(100)) %&amp;gt;% as_tibble()&#xA;&#xA;# 选择合适的颜色&#xA;colors &amp;lt;- brewer.pal(11, &#39;RdBu&#39;)&#xA;# 考虑到数字的正负号，我们这里用差异较明显的颜色区分正负&#xA;pos.color &amp;lt;- colorRampPalette(colors[6:1])(1000 * round(max(data$Val), 3) + 1)&#xA;neg.color &amp;lt;- colorRampPalette(colors[6:11])(-1000 * round(min(data$Val), 3) + 1)&#xA;&#xA;res &amp;lt;- rep(&#39;&#39;, length(data$Val))&#xA;for (i in 1:length(data$Val)) {&#xA;  if (round(data$Val[i], 3) &amp;lt; 0) {&#xA;    res[i] &amp;lt;- neg.color[1000 * round(-data$Val[i], 3)]&#xA;  } else if (round(data$Val[i], 3) &amp;gt; 0) {&#xA;    res[i] &amp;lt;- pos.color[1000 * round(data$Val[i], 3)]&#xA;  } else {&#xA;    res[i] &amp;lt;- pos.color[1]&#xA;  }&#xA;}&#xA;data[&#39;Color&#39;] &amp;lt;- res&#xA;data[, c(&#39;Red&#39;, &#39;Green&#39;, &#39;Blue&#39;)] &amp;lt;- t(col2rgb(res)) / 255&#xA;&#xA;# 演示颜色&#xA;ggplot(data = data, aes(x = Val, y = Val)) +&#xA;  geom_point(color = data$Color, size = 10)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;其中，data中同一行表示数字与对应的颜色。&lt;/p&gt;</description>
    </item>
    <item>
      <title>一周小结</title>
      <link>/post/2021/09/03/blog/</link>
      <pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/09/03/blog/</guid>
      <description>&lt;h2 id=&#34;python并行处理&#34;&gt;Python并行处理&lt;/h2&gt;&#xA;&lt;p&gt;Python 中的concurrent包提供了对于并行运行的接口，包括进程级并行和线程级并行。下面是一个例子。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor&#xA;&#xA;def func(a, b):&#xA;    return a*b&#xA;&#xA;if __name__ == &#39;__main__&#39;:&#xA;    n_core = 4&#xA;    nums = 10000&#xA;    b = 2&#xA;&#xA;    res = [0 for _ in range(nums)]&#xA;    with ProcessPoolExecutor(n_core) as pool:&#xA;        futures = {pool.submit(func, i, b): i for i in range(1, nums)}&#xA;        for f in futures:&#xA;            res[futures[f]] = f.result()&#xA;    &#xA;    res = [0 for _ in range(nums)]&#xA;    with ThreadPoolExecutor(n_core) as pool:&#xA;        futures = {pool.submit(func, i, b): i for i in range(1, nums)}&#xA;        for f in futures:&#xA;            res[futures[f]] = f.result()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;在并行处理时，写明 &lt;em&gt;&lt;strong&gt;python if &lt;strong&gt;name&lt;/strong&gt; == &amp;lsquo;&lt;strong&gt;main&lt;/strong&gt;&amp;rsquo;&lt;/strong&gt;&lt;/em&gt; 以声明主进程。&lt;/p&gt;</description>
    </item>
    <item>
      <title>作图-R语言中的冲击图(Alluvial)</title>
      <link>/post/2021/05/08/blog/</link>
      <pubDate>Sat, 08 May 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/05/08/blog/</guid>
      <description>&lt;p&gt;冲击图可以非常直观地描述一组观测值的多个离散变量的情况。&lt;/p&gt;&#xA;&lt;p&gt;R语言中生成冲击图需要依赖包&lt;strong&gt;ggalluvial&lt;/strong&gt;. 使用以下代码安装依赖包。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;install.packages(&amp;quot;ggalluvial&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;示例数据&#34;&gt;示例数据&lt;/h1&gt;&#xA;&lt;p&gt;这里用随机生成的虚拟数据作为示例数据&lt;strong&gt;data&lt;/strong&gt;。&lt;strong&gt;data&lt;/strong&gt;中每一行表示一个观测值。其中，每个观测值有三个维度的属性，分别是&lt;strong&gt;A&lt;/strong&gt;，&lt;strong&gt;B&lt;/strong&gt;和&lt;strong&gt;C&lt;/strong&gt;。对于&lt;strong&gt;A&lt;/strong&gt;属性，有&lt;strong&gt;3&lt;/strong&gt;个水平，分别是&lt;strong&gt;a1&lt;/strong&gt;，&lt;strong&gt;a2&lt;/strong&gt;和&lt;strong&gt;a3&lt;/strong&gt;。&lt;strong&gt;B&lt;/strong&gt;属性有&lt;strong&gt;2&lt;/strong&gt;个水平，&lt;strong&gt;C&lt;/strong&gt;属性有&lt;strong&gt;4&lt;/strong&gt;个水平。总共包含&lt;strong&gt;3000&lt;/strong&gt;个观测值。因此，&lt;strong&gt;data&lt;/strong&gt;的大小为&lt;strong&gt;3000*3&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data &amp;lt;- data.frame(&#xA;  id = seq(1:3000),&#xA;  A = rep(c(&#39;a1&#39;, &#39;a2&#39;, &#39;a3&#39;), 1000),&#xA;  B = rep(c(&#39;b1&#39;, &#39;b2&#39;), 1500),&#xA;  C = rep(c(&#39;c1&#39;, &#39;c2&#39;, &#39;c3&#39;, &#39;c4&#39;), 750)&#xA;)&#xA;knitr::kable(head(data))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: right&#34;&gt;id&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;A&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;B&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;C&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;a1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;b1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;c1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;a2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;b2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;c2&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;3&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;a3&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;b1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;c3&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;a1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;b2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;c4&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;5&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;a2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;b1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;c1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;6&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;a3&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;b2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;c2&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;将数据转换为长格式数据&lt;strong&gt;data_long&lt;/strong&gt;。&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tidyverse)&#xA;&#xA;data_long &amp;lt;- data %&amp;gt;%&#xA;  as_tibble() %&amp;gt;%&#xA;  pivot_longer(cols=c(A, B, C), names_to = &#39;X&#39;, values_to = &#39;Response&#39;) %&amp;gt;%&#xA;  group_by(X, Response)&#xA;&#xA;data_long %&amp;gt;%&#xA;  head() %&amp;gt;%&#xA;  knitr::kable()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: right&#34;&gt;id&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;X&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Response&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;A&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;a1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;B&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;b1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;C&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;c1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;A&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;a2&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;B&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;b2&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;C&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;c2&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;这里转换为长格式数据的目的在于将&lt;strong&gt;A&lt;/strong&gt;，&lt;strong&gt;B&lt;/strong&gt;和&lt;strong&gt;C&lt;/strong&gt;三个属性和它们的不同水平相互组合。其中&lt;strong&gt;X&lt;/strong&gt;表示不同的属性，将来在冲击图中作为&lt;strong&gt;x轴&lt;/strong&gt;。&lt;strong&gt;Response&lt;/strong&gt;为各属性的不同取值，在图中表示为每个柱子&lt;strong&gt;划分&lt;/strong&gt;的段。原始数据中的1行在长格式数据中被拆分成了3行。&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h1 id=&#34;绘图代码&#34;&gt;绘图代码&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggalluvial)&#xA;&#xA;ggplot(data_long,&#xA;       aes(x = X, stratum = Response, alluvium = id, fill = Response, label = Response)) +&#xA;  scale_x_discrete(expand = c(.1, .1)) +&#xA;  geom_flow() +&#xA;  geom_stratum(alpha = .5) +&#xA;  geom_text(stat = &amp;quot;stratum&amp;quot;, size = 4) +&#xA;  ylab(&#39;Number of subjects&#39;) +&#xA;  xlab(&#39;&#39;) +&#xA;  theme_classic()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;img src=&#34;/post/2021/05/08/blog/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&#xA;&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/qq_42458954/article/details/109106860&#34;&gt;https://blog.csdn.net/qq_42458954/article/details/109106860&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>R语言基本统计</title>
      <link>/post/2021/05/04/blog/</link>
      <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/05/04/blog/</guid>
      <description>&lt;p&gt;本文为笔者在学习b站up主@&lt;a href=&#34;https://space.bilibili.com/43536169?spm_id_from=333.788.b_765f7570696e666f.1&#34;&gt;学术数据分析及可视化&lt;/a&gt;相关视频的笔记。文中只是笔者个人的理解，描述也只是便于自己理解。在使用相关内容时，还需要进一步查看相关的手册或帮助文档。&lt;/p&gt;&#xA;&lt;h1 id=&#34;相关&#34;&gt;相关&lt;/h1&gt;&#xA;&lt;p&gt;cor()用于计算两个向量的相关系数。ggm::pcor()用于计算偏相关系数。这两个函数只能计算相关系数。cor.test(), psych::cor.test和psych::pcor.test()分别计算相关系数和偏相关系数及其显著性检验的结果。&lt;/p&gt;&#xA;&lt;h1 id=&#34;差异性&#34;&gt;差异性&lt;/h1&gt;&#xA;&lt;h2 id=&#34;t检验&#34;&gt;t检验&lt;/h2&gt;&#xA;&lt;p&gt;t.test()用于进行独立样本或配对样本t检验。要求各组内方差相等。相应的非参数版本为wilcox.test()。&lt;/p&gt;&#xA;&lt;h2 id=&#34;方差分析&#34;&gt;方差分析&lt;/h2&gt;&#xA;&lt;p&gt;方差分析要求数据满足三个条件，分别是正态性、方差齐性和独立性。独立性一般在实验设计阶段考虑。这里只讨论前两个条件。&lt;/p&gt;&#xA;&lt;h3 id=&#34;对正态性的检验&#34;&gt;对正态性的检验&lt;/h3&gt;&#xA;&lt;p&gt;数据是否满足正态性可以通过直方图hist(), qq图qqplot()和shapiro.test()进行检验。其中shapiro.test()检验的零假设为数据满足正态性。&lt;/p&gt;&#xA;&lt;h3 id=&#34;对方差齐性的检验&#34;&gt;对方差齐性的检验&lt;/h3&gt;&#xA;&lt;p&gt;方差齐性检验可以通过bartlett.test(), leveneTest()和fligner.test()进行。它们的零假设均为各组方差相等。&lt;/p&gt;&#xA;&lt;h3 id=&#34;单多因素方差分析anova&#34;&gt;单/多因素方差分析(ANOVA)&lt;/h3&gt;&#xA;&lt;p&gt;使用aov()。TukeyHSD()用于进行事后检验/多重比较。&lt;/p&gt;&#xA;&lt;h3 id=&#34;单多因素重复测量方差分析ancova&#34;&gt;单/多因素重复测量方差分析(ANCOVA)&lt;/h3&gt;&#xA;&lt;p&gt;aov(y~x+Error(subjects/Group))&lt;/p&gt;&#xA;&lt;h3 id=&#34;非参数方差分析&#34;&gt;非参数方差分析&lt;/h3&gt;&#xA;&lt;p&gt;其中一种利用重采样的方法使用lmPerm::aovp()，用法与aov()类似。&lt;/p&gt;&#xA;&lt;h1 id=&#34;回归&#34;&gt;回归&lt;/h1&gt;&#xA;&lt;h2 id=&#34;回归拟合&#34;&gt;回归拟合&lt;/h2&gt;&#xA;&lt;p&gt;lm()。&#xA;拟合通常用于数据可视化，涉及两个变量之间的关系。目的是找到两个变量之间最合适的关系。&#xA;评价模型好坏的指标有残差标准误$\sqrt{\frac{sum(residual^2)}{n-p-1}}$和决定系数$R^2=1-\frac{RSS}{TSS}$。&#xA;anova(fit, fitnull)可以比较拟合模型与零模型之间是否有差异。零模型一般为$\hat{y}=mean(y)$。&#xA;包aomisc提供了许多不同函数的拟合函数。以线性和指数函数拟合为例。&lt;/p&gt;&#xA;&lt;h3 id=&#34;线性多项式&#34;&gt;线性/多项式&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;\(y=a+bx+cx^2\)&lt;/code&gt;&#xA;drm(y&lt;del&gt;x, fct=DRC.poly2())等价于lm(y&lt;/del&gt;x+I(x^2)).&lt;/p&gt;&#xA;&lt;h3 id=&#34;指数&#34;&gt;指数&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;\(y=a*exp(k*x)\)&lt;/code&gt;&#xA;drm(y~x, fct=DRC.expoDecay())&lt;/p&gt;&#xA;&lt;h2 id=&#34;回归分析&#34;&gt;回归分析&lt;/h2&gt;&#xA;&lt;p&gt;回归分析通常用于模型构建预测等，可以包含多个变量。&lt;/p&gt;&#xA;&lt;h3 id=&#34;一般线性模型&#34;&gt;一般线性模型&lt;/h3&gt;&#xA;&lt;p&gt;lm().&#xA;AIC()用于比较模型的好坏，值越小模型越好。也可以用anova()对两个模型是否存在差异进行检验。&#xA;MASS::stepAIC(), leaps::resubsets()和car::subsets()可以筛选纳入模型的变量。car::vif()可以计算自变量的膨胀系数，值越大表示与其他变量的共线性更强。&lt;/p&gt;&#xA;&lt;h3 id=&#34;广义线性模型&#34;&gt;广义线性模型&lt;/h3&gt;&#xA;&lt;p&gt;把因变量按照特定的分布进行转换，以符合特定的概率分布，再利用该分布进行预测。glm()，需要指定函数分布族family。高斯分布的glm与lm的结果是相同的。&#xA;当响应变量为分类变量时，采用logistic（二分类）。glm(formula, data, family=binomial(&amp;rsquo;logit&amp;rsquo;))。涉及三分类及以上时，可以用nnet::multinom()进行建模分析。&lt;/p&gt;&#xA;&lt;h3 id=&#34;线性混合模型&#34;&gt;线性混合模型&lt;/h3&gt;&#xA;&lt;p&gt;nlme和lme4包提供了相关的函数。nlme::lme(), lme4::lmer(). Eg. lme(Richness~NAP, random=&lt;del&gt;1|Beach, data) or lmer(Richness&lt;/del&gt;NAP+1|Beach, data).&lt;/p&gt;&#xA;&lt;h3 id=&#34;广义线性混合模型&#34;&gt;广义线性混合模型&lt;/h3&gt;&#xA;&lt;p&gt;lme4::glmer()和glmmADMB::glmmadmb()提供了相关的建模函数。&lt;/p&gt;&#xA;&lt;h3 id=&#34;其他&#34;&gt;其他&lt;/h3&gt;&#xA;&lt;p&gt;其他还包括贝叶斯回归模型、广义非线性模型和广义非线性混合模型。&lt;/p&gt;&#xA;&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;&#xA;&lt;p&gt;B站UP主@&lt;a href=&#34;https://space.bilibili.com/43536169?spm_id_from=333.788.b_765f7570696e666f.1&#34;&gt;学术数据分析及可视化&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>作图-ggplot2中的直方图和条形图</title>
      <link>/post/2021/04/19/blog/</link>
      <pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/04/19/blog/</guid>
      <description>&lt;p&gt;本文用于记录ggplot2作图相关的代码，会不定期更新。&lt;/p&gt;&#xA;&lt;p&gt;示例数据格式为&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tidyverse)&#xA;&#xA;data &amp;lt;- read.csv(&#39;./test.csv&#39;) %&amp;gt;%&#xA;  as_tibble()&#xA;data %&amp;gt;%&#xA;  head() %&amp;gt;%&#xA;  knitr::kable()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: right&#34;&gt;ID&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Gender&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: right&#34;&gt;Age&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Education&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;M&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;6&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;M&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;F&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;M&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;3&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;F&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;12&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;M&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;F&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;19&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;H&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;5&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;F&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;L&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;6&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;F&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: right&#34;&gt;2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;M&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h1 id=&#34;直方图&#34;&gt;直方图&lt;/h1&gt;&#xA;&lt;p&gt;..density..: 指明y轴为频率值，为ggplot2内置的变量。&lt;/p&gt;&#xA;&lt;p&gt;geom_vline: 添加竖直线，线与x轴的交点由xintercept指定。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data %&amp;gt;%&#xA;  ggplot(aes(x=Age, y=..density..)) +&#xA;  geom_histogram(stat = &#39;bin&#39;) +&#xA;  geom_vline(xintercept=mean(data$Age), linetype=&#39;dashed&#39;, color=&#39;blue&#39;) +&#xA;  ylab(&#39;Density&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;img src=&#34;/post/2021/04/19/blog/index_files/figure-html/histogram-1.png&#34; width=&#34;672&#34; /&gt;&#xA;&lt;h1 id=&#34;条形图&#34;&gt;条形图&lt;/h1&gt;&#xA;&lt;p&gt;ggplot2的条形图，每个柱子的高度直接跟输入数据中的某一列对应，其中一个值会产生一个柱子。这跟seaborn包中catplot的逻辑不太一样：它接受一组数对应一个柱子，因此可以自动生成误差线，而不用单独添加。但也可以自定义函数，将数据转换和作图封装起来，达到类似seaborn中catplot的效果&lt;/p&gt;&#xA;&lt;p&gt;geom_errorbar: 为每个柱子添加&lt;strong&gt;标准差线&lt;/strong&gt;，也可以给&lt;strong&gt;折线图&lt;/strong&gt;的每个点添加。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data %&amp;gt;%&#xA;  group_by(Gender) %&amp;gt;%&#xA;  mutate(&#xA;    value=mean(Age),&#xA;    sd=sd(Age)&#xA;  ) %&amp;gt;%&#xA;  ggplot(aes(x=Gender, y=value, fill=Gender)) +&#xA;  geom_col(position = &amp;quot;dodge&amp;quot;, width = 0.3) + &#xA;  geom_errorbar(aes(ymin = value-sd, ymax = value+sd), &#xA;                position = position_dodge(0.9), width = .05) +&#xA;  ylab(&#39;Age&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;img src=&#34;/post/2021/04/19/blog/index_files/figure-html/barplot-1.png&#34; width=&#34;672&#34; /&gt;&#xA;&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://semba-blog.netlify.app/03/25/2020/barplot-with-errorbar-in-ggplot2/&#34;&gt;https://semba-blog.netlify.app/03/25/2020/barplot-with-errorbar-in-ggplot2/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.sthda.com/english/wiki/ggplot2-barplots-quick-start-guide-r-software-and-data-visualization&#34;&gt;http://www.sthda.com/english/wiki/ggplot2-barplots-quick-start-guide-r-software-and-data-visualization&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>利用blogdown建立个人博客</title>
      <link>/post/2021/04/04/blog/</link>
      <pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/04/04/blog/</guid>
      <description>&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;&#xA;&lt;p&gt;安装RStudio和R包blogdown。&lt;/p&gt;&#xA;&lt;h2 id=&#34;创建博客&#34;&gt;创建博客&lt;/h2&gt;&#xA;&lt;p&gt;在R终端中输入如下代码即可创建默认主题的博客。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;blogdown::new_site()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;另外也可以在RStudio中通过图形界面创建。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;鼠标点击File -&amp;gt; New Project&amp;hellip; -&amp;gt; New Directory -&amp;gt; Website using blogdown&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;在弹出的对话框的Directory name内输入本地存放项目的目录名。Create project as subdirectory of: 为项目的父目录。之后点击Create Project 按钮。Hugo theme为博客的主题。这里我们用默认主题。其他主题参考&lt;a href=&#34;https://themes.gohugo.io&#34;&gt;HUGO主题页面&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;img src=&#34;index.assets/image-20210404173021104.png&#34; style=&#34;width:50%;float:center;&#34;&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;在R终端中输入&lt;code&gt;blogdown::server_site()&lt;/code&gt;即可在本地部署博客。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;在gitee上部署博客&#34;&gt;在Gitee上部署博客&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;首先需要在gitee上创建仓库，并将Depoly directory更改为 &lt;strong&gt;“.”&lt;/strong&gt;（不带引号） 。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;img src=&#34;index.assets/image-20210404173840632.png&#34; style=&#34;width:50%;float:center;&#34;&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;在R终端中输入&lt;code&gt;blogdown::hugo_build(relativeURLs=TRUE)&lt;/code&gt;并运行。可以看到在home目录下生成了public。该目录下即为生成的博客静态页面。此时点击public/index.html是可以在浏览器查看的。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;将public中的文件同步到刚创建的gitee或github仓库中。使用的命令如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd public&#xA;git init&#xA;git add .&#xA;git commit -m &#39;first commit&#39;&#xA;git remote add origin xxxx.git&#xA;git push -f origin master&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;之后就可以通过访问username.gitee.io/home访问自己的博客了。&lt;/p&gt;&#xA;&lt;p&gt;至此，我们使用blogdown创建了自己的博客，并使用hugo生成了静态页面。最后通过gitee或github发布生成的静态页面。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
