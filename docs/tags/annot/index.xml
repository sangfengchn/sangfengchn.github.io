<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Annot on Sang Feng | 桑峰</title>
    <link>/tags/annot/</link>
    <description>Recent content in Annot on Sang Feng | 桑峰</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 03 Sep 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/annot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一周小结</title>
      <link>/post/2021/09/03/blog/</link>
      <pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/09/03/blog/</guid>
      <description>&lt;h2 id=&#34;python并行处理&#34;&gt;Python并行处理&lt;/h2&gt;&#xA;&lt;p&gt;Python 中的concurrent包提供了对于并行运行的接口，包括进程级并行和线程级并行。下面是一个例子。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor&#xA;&#xA;def func(a, b):&#xA;    return a*b&#xA;&#xA;if __name__ == &#39;__main__&#39;:&#xA;    n_core = 4&#xA;    nums = 10000&#xA;    b = 2&#xA;&#xA;    res = [0 for _ in range(nums)]&#xA;    with ProcessPoolExecutor(n_core) as pool:&#xA;        futures = {pool.submit(func, i, b): i for i in range(1, nums)}&#xA;        for f in futures:&#xA;            res[futures[f]] = f.result()&#xA;    &#xA;    res = [0 for _ in range(nums)]&#xA;    with ThreadPoolExecutor(n_core) as pool:&#xA;        futures = {pool.submit(func, i, b): i for i in range(1, nums)}&#xA;        for f in futures:&#xA;            res[futures[f]] = f.result()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;在并行处理时，写明 &lt;em&gt;&lt;strong&gt;python if &lt;strong&gt;name&lt;/strong&gt; == &amp;lsquo;&lt;strong&gt;main&lt;/strong&gt;&amp;rsquo;&lt;/strong&gt;&lt;/em&gt; 以声明主进程。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
