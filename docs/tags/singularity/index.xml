<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Singularity on Sang Feng | 桑峰</title>
    <link>/tags/singularity/</link>
    <description>Recent content in Singularity on Sang Feng | 桑峰</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Feb 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/singularity/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Singularity-05-Matlab&amp;fmriprep</title>
      <link>/post/2022/02/21/blog/</link>
      <pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate>
      <guid>/post/2022/02/21/blog/</guid>
      <description>&lt;h1 id=&#34;运行matlab&#34;&gt;运行MATLAB&lt;/h1&gt;&#xA;&lt;p&gt;使用matlab镜像运行matlab可使用如下命令：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;singularity exec matlab-r2020a.img matlab -batch xxx&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;其中matlab-r2020a.img为镜像名称，xxx为matlab脚本，不包含.m。&lt;/p&gt;&#xA;&lt;h1 id=&#34;运行fmriprep&#34;&gt;运行fmriprep&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;脑院高性能平台最高支持fmriprep版本为20.1.3，版本再高会报告I/O异常的错误。&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;在镜像中运行fmriprep的命令（不同版本的命令有些许差异，这里以20.1.3为例）如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;singularity exec fmriprep-20.1.3.simg fmriprep data-test/ fres_data-test/ participant \&#xA;--skip_bids_validation \&#xA;--participant_label 12002 \&#xA;-w fwk_data-test/ \&#xA;--verbose \&#xA;--fs-license-file license_lin.txt&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;其中fmriprep-20.1.3.simg为镜像名称。data-test为存放所有被试的文件夹。&lt;/p&gt;&#xA;&lt;p&gt;运行smriprep的命令如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;singularity exec fmriprep-20.1.3.simg smriprep data-test/ sres_data-test/ participant \&#xA;--pariticipant_label 12002 \&#xA;-w fwk_data-test/ \&#xA;--fs-license-file license_lin.txt&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Singularity-04-安装MATLAB</title>
      <link>/post/2022/02/17/blog/</link>
      <pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate>
      <guid>/post/2022/02/17/blog/</guid>
      <description>&lt;p&gt;以下是记录本人在使用学院高性能计算平台运行singularity中遇到的问题以及相应的解决方法，不一定适用于其他场景。&lt;/p&gt;&#xA;&lt;h1 id=&#34;建立基础镜像&#34;&gt;建立基础镜像&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo singularity build --sandbox tmp/ docker://centos:7&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;尝试过ubuntu:20.04和18.04，在服务器上均会报告“&lt;strong&gt;FATAL: kernel too old&lt;/strong&gt;”的错误。Centos6.10和7可以，但是6.10的yum源已经不再支持。因此使用Centos7作为基础镜像。&lt;/p&gt;&#xA;&lt;h1 id=&#34;安装matlab&#34;&gt;安装MATLAB&lt;/h1&gt;&#xA;&lt;p&gt;这里参考：https://zhuanlan.zhihu.com/p/394298249&lt;/p&gt;&#xA;&lt;p&gt;需要注意的是，安装之前，需要在系统里面安装一些库文件和编译器，命令如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum install libX11 libXmu&#xA;yum install gcc java-11-openjdk-devel&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;em&gt;libXmu中包含libXt.so.6。&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;后处理&#34;&gt;后处理&lt;/h1&gt;&#xA;&lt;p&gt;安装好MATLAB后，发现无法通过&lt;strong&gt;singularity exec&lt;/strong&gt;去调用。在**/environment**文件中将MATLAB的安装路径添加进PATH环境变量里面也无法直接运行（可能是写入的命令格式有问题，不确定）。之后查到可以定义一个recipe文件（append.def），通过已经生成的镜像重新构建镜像。recipe文件内容如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Bootstrap: localimage&#xA;From: tmp/&#xA;&#xA;%environment&#xA;        export PATH=/usr/local/matlab/R2020a/bin:$PATH&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;然后重新构建镜像：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo singularity build --sandbox senv-matlab/ append.def&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;构建完成后，需要将镜像打包为可读写的格式（.img文件）。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo singularity build --writable senv-matlab.img senv-matlab/&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;这里生成的senv-matlab.img就可在服务器上使用了，也可在服务器上将其转换为压缩格式（.sif/.sqsh/.simg文件等）。不知道为什么直接在本地（Ubuntu 21.10）压缩后，在本地无运行镜像，会报告如下错误。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ERROR  : Failed to mount squashfs image in (read only): Invalid argument&#xA;ABORT  : Retval = 255&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/394298249&#34;&gt;https://zhuanlan.zhihu.com/p/394298249&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Singularity-03-创建镜像</title>
      <link>/post/2021/06/01/blog/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/06/01/blog/</guid>
      <description>&lt;p&gt;在Windows 10的Linux子系统（&lt;strong&gt;WLS&lt;/strong&gt;）中安装singularity(version=2.6.0)，并创建镜像。&lt;/p&gt;&#xA;&lt;p&gt;在之前多次尝试中发现，在直接创建.simg镜像时会报告错误（Error: no more available loop devices.），导致创建失败。尝试发现可以通过添加**&amp;ndash;sandbox**参数解决。完整命令如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo singularity build --sandbox image_name library/recipes&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;其中，image_name为镜像的名称，library/recipes可以为shub，docker链接或符合singularity语法的配置文件（config.def）。如果在wsl中，输入上述命令后，提示无法找到此命令，而直接输入singularity可以正常显示相关信息。那么可以为singularity创建链接文件解决。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo ln -s /usr/local/singularity/bin/singularity /usr/bin/singularit&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;配置文件实例：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Bootstrap: yum&#xA;&#xA;OSVersion: 7&#xA;&#xA;MirrorURL: http://mirror.centos.org/centos-%{OSVERSION}/%{OSVERSION}/os/$basearch/&#xA;&#xA;Include: yum&#xA;&#xA;%labels&#xA;&#xA;    Python version: 3.9.5&#xA;&#xA;    R version: 4.1.0&#xA;&#xA;&#xA;%post&#xA;&#xA;    yum -y update&#xA;&#xA;    yum -y groupinstall &amp;quot;Development Tools&amp;quot;&#xA;&#xA;    yum install -y gcc gcc-c++ gcc-gfortran java-1.8.0-openjdk.x86_64 java-1.8.0-openjdk-devel.x86_64&#xA;&#xA;    yum install -y readline-devel bzip2-devel libXt-devel fonts-chinese tcl tcl-devel tclx tk tk-devel mesa-libGLU mesa-libGLU-devel libcurl libcurl-devel xz-devel.x86_64 libjpeg-devel pcre2-devel libtiff-devel libicu-devel which vim&#xA;&#xA;%environment&#xA;&#xA;    export LC_ALL=C&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;奇怪的是，如果把配置文件的名称改为demo.def或test.def，则无法创建镜像。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Singularity-02-常见问题汇总</title>
      <link>/post/2021/05/20/blog/</link>
      <pubDate>Thu, 20 May 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/05/20/blog/</guid>
      <description>&lt;h3 id=&#34;error---base-home-directory-does-not-exist-within-the-container-brain&#34;&gt;ERROR  : Base home directory does not exist within the container: /brain&lt;/h3&gt;&#xA;&lt;p&gt;用沙盒模式创建镜像，然后以交互方式进入镜像后创建/brain目录。之后将沙盒格式的镜像打包为.img文件即可。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 创建沙盒镜像&#xA;singularity build --sandbox centos7 docker://centos:7&#xA;&#xA;# 以交互方式打开镜像&#xA;singularity shell --writable centos7/&#xA;Singularity: Invoking an interactive shell within container...&#xA;&#xA;# 镜像内创建缺失目录&#xA;Singularity centos7:~/envs&amp;gt; mkdir /brain&#xA;Singularity centos7:~/envs&amp;gt; exit&#xA;&#xA;# 重新打包镜像&#xA;singularity build centos7.img centos7/&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;error---home-directory-is-not-owned-by-calling-user-usrlocalsingularity-252&#34;&gt;ERROR  : Home directory is not owned by calling user: /usr/local/singularity-2.5.2&lt;/h3&gt;&#xA;&lt;p&gt;报错命令：singularity shell smriprep.simg&lt;/p&gt;&#xA;&lt;p&gt;解决方法：添加&amp;ndash;home xxx参数，这里必须是绝对路径。例如：singularity shell &amp;ndash;home /babri/sangf/Desktop/test/ smriprep.simg&lt;/p&gt;</description>
    </item>
    <item>
      <title>Singularity-01-安装</title>
      <link>/post/2021/05/19/blog/</link>
      <pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/05/19/blog/</guid>
      <description>&lt;p&gt;简单来讲，Singularity是一种可以跨平台执行的小型虚拟机。在数据分析时，首先往往要搭建运行环境，比如R，python等。为了保证结果的可靠性，通常要保证跨设备环境的一致性。但是在跨运算设备之间搭建相同的环境是一项比较麻烦的事情。因此，如果只搭建一次环境，就可以在各个设备上使用，就比较轻松了。Singularity和Docker就提供了这样的功能。笔者在这里使用Singularity&lt;a href=&#34;%5Bhttps://singularity.lbl.gov/index.html%5D&#34;&gt;1&lt;/a&gt;，版本为2.4.6。&lt;/p&gt;&#xA;&lt;h2 id=&#34;安装依赖库&#34;&gt;安装依赖库&lt;/h2&gt;&#xA;&lt;h3 id=&#34;ubuntu&#34;&gt;Ubuntu&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get update&#xA;sudo apt-get install python dh-autoreconf build-essential libarchive-dev&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;centos&#34;&gt;CentOS&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo yum update&#xA;sudo yum groupinstall &#39;Development Tools&#39;&#xA;sudo yum install libarchive-devel&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;编译安装&#34;&gt;编译安装&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;VER=2.4.6&#xA;wget https://github.com/singularityware/singularity/releases/download/$VER/singularity-$VER.tar.gz&#xA;tar xvf singularity-$VER.tar.gz&#xA;cd singularity-$VER&#xA;./autogen.sh&#xA;./configure --prefix=&amp;quot;/usr/local/singularity-${VER}&amp;quot;&#xA;make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;将**/usr/local/singularity-2.4.6/bin&lt;strong&gt;添加进&lt;/strong&gt;$PATH**并重新加载配置文件。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;export $PATH=/usr/local/singularity-2.4.6/bin:$PATH&amp;quot; &amp;gt; ~/.bashrc&#xA;source ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;center&gt;&#xA;    &lt;img style=&#34;width:50%;&#34;&#xA;    src=&#34;./img/iShot2021-05-19 10.37.27.png&#34;&gt;&#xA;    &lt;br&gt;&#xA;    &lt;div style=&#34;color:orange; border-bottom: 1px solid #d9d9d9;&#xA;    display: inline-block;&#xA;    color: #999;&#xA;    padding: 2px;&#34;&gt;图1. 显示singularity版本&lt;/div&gt;&#xA;&lt;/center&gt;&#xA;&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;</description>
    </item>
  </channel>
</rss>
