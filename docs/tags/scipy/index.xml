<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scipy on Sang Feng | 桑峰</title>
    <link>//localhost:4321/tags/scipy/</link>
    <description>Recent content in Scipy on Sang Feng | 桑峰</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Jan 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:4321/tags/scipy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Find clusters in a image</title>
      <link>//localhost:4321/post/2022/01/19/blog/</link>
      <pubDate>Wed, 19 Jan 2022 00:00:00 +0000</pubDate>
      <guid>//localhost:4321/post/2022/01/19/blog/</guid>
      <description>&lt;h1 id=&#34;问题&#34;&gt;问题&lt;/h1&gt;&#xA;&lt;p&gt;我们在对神经影像数据做完统计后（例如ICA），会得到相应的mask二值文件。但是有些情况下，我们还需要进一步对mask中每一个cluster进行分析（例如计算mask中每个cluster之间的功能连接）。所以我们需要从mask文件中得到每一个cluster。由于没有想到有哪个现成的工具包可以解决上述的问题。因此，本文试图用自己的方式去解决上述的问题。&lt;/p&gt;&#xA;&lt;h1 id=&#34;方法&#34;&gt;方法&lt;/h1&gt;&#xA;&lt;h2 id=&#34;思路一&#34;&gt;思路一&lt;/h2&gt;&#xA;&lt;p&gt;看到这个问题的时候，最朴素的想法就是用MRIcron/GL或者ITK-SNAP手动将mask中的每一个cluster标记出来。&lt;/p&gt;&#xA;&lt;h2 id=&#34;思路二&#34;&gt;思路二&lt;/h2&gt;&#xA;&lt;p&gt;虽然上述手动标记的方法能解决这个问题，但是显得没那么优雅（bushi。就想换用代码解决这个问题。而且写完代码下次再碰到类似的问题，就能直接使用了（还能水一篇推送。&lt;/p&gt;&#xA;&lt;p&gt;首先我想着先找出mask中所有非零元素的下标，然后选一个非零元素，再去判断这个元素的邻域是否是0（如果是0就意味着已经到了这个cluster的边缘）。但是在三维图像里面，要判断邻域是否到达边缘，需要写8个条件判断，这也很不优雅（主要还是找到了一个现成的轮子。&lt;/p&gt;&#xA;&lt;p&gt;之后在找“轮子”的时候，看到了scipy包里面的一个函数可以实现上面的过程。因此通过调用它近乎完美地解决了最开始的问题（bushi。下面是相应的代码。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import nibabel as nib&#xA;from scipy.ndimage import measurements&#xA;import logging&#xA;logging.basicConfig(level=logging.INFO)&#xA;&#xA;img = nib.load(&#39;test-binary.nii&#39;)&#xA;data = img.get_fdata()&#xA;labels, num_labels = measurements.label(data)&#xA;logging.info(f&#39;The number of cluster is {num_labels}&#39;)&#xA;nib.save(nib.Nifti1Image(labels, img.affine), f&#39;test_cluster-mix.nii&#39;)&#xA;for i in range(num_labels):&#xA;    tmp_data = np.zeros(data.shape)&#xA;    tmp_data[labels == i + 1] = 1&#xA;    nib.save(nib.Nifti1Image(tmp_data, img.affine), f&#39;test_cluster-{i+1}.nii&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;test-binary.nii是从Neurosynth上随便找的一个功能连接图谱，并以±0.2作为阈值得到的mask文件（Figure 1）。&lt;/p&gt;&#xA;&lt;div class=&#34;figure&#34;&gt;&#xA;&lt;img src=&#34;./img/fig-1.png&#34; alt=&#34;test-binary.nii可视化结果。&#34;  /&gt;&#xA;&lt;p class=&#34;caption&#34;&gt;&lt;span id=&#34;fig:unnamed-chunk-1&#34;&gt;&lt;/span&gt;Figure 1: test-binary.nii可视化结果。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;上述代码运行后，对于mask中的每一个cluster会得到一个.nii文件，同时也会得到一个混合了所有cluster的.nii文件。结果如Figure 2所示。&lt;/p&gt;&#xA;&lt;div class=&#34;figure&#34;&gt;&#xA;&lt;img src=&#34;./img/fig-2.png&#34; alt=&#34;混合了所有cluster的结果，其中每个cluster用一个整数标记。&#34;  /&gt;&#xA;&lt;p class=&#34;caption&#34;&gt;&lt;span id=&#34;fig:unnamed-chunk-2&#34;&gt;&lt;/span&gt;Figure 2: 混合了所有cluster的结果，其中每个cluster用一个整数标记。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://neurosynth.org/locations/-4_24_46_6&#34;&gt;https://neurosynth.org/locations/-4_24_46_6&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/52087533/how-to-find-number-of-clusters-in-a-image/52088840&#34;&gt;https://stackoverflow.com/questions/52087533/how-to-find-number-of-clusters-in-a-image/52088840&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
