<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WMH on Sang Feng | 桑峰</title>
    <link>/tags/wmh/</link>
    <description>Recent content in WMH on Sang Feng | 桑峰</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Nov 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/wmh/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Toolbox for WMH</title>
      <link>/post/2021/11/07/blog/</link>
      <pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/11/07/blog/</guid>
      <description>&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;&#xA;&lt;p&gt;白质高信号（white matter hyperintensity, WMH）是一种因脑白质病变导致的、在T2 Flari像上表现为高灰质值的现象。在相关研究中，确定白质高信号区域是一个基本的问题。一般认为，由专业的影像科医生或受过培训的人员手动分割的结果是金标准。然而，手动分割费时费力。因而，研究者提出了许多自动半自动的分割工具。本文将对几种常用的白质高信号自动分割工具的用法进行简单介绍。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./img/fig_01.png&#34; alt=&#34;&#34;&gt;&lt;!-- --&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;lst&#34;&gt;LST&lt;/h2&gt;&#xA;&lt;p&gt;LST (&lt;a href=&#34;https://www.applied-statistics.de/lst.html&#34;&gt;https://www.applied-statistics.de/lst.html&lt;/a&gt;) 是基于SPM的白质高信号分割工具，它包含两个分割算法：LPA和LGA。其中，LPA不需要T1数据，而LGA需要T1和Flari数据。&lt;/p&gt;&#xA;&lt;p&gt;代码入下：&lt;/p&gt;&#xA;&lt;h3 id=&#34;lpa&#34;&gt;LPA&lt;/h3&gt;&#xA;&lt;p&gt;尽管LPA在分割WMH的时候不需要T1数据，然而在输入里面还是可以将T1数据输入，用来作为配准的参考图像。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;% WMH segment by LPA in LST.&#xA;close all; clear; clc;&#xA;&#xA;% Set SPM12 into Path.&#xA;SPM_PATH = &#39;~/Tools/spm12&#39;;&#xA;addpath(SPM_PATH);&#xA;&#xA;% Set root path.&#xA;ROOT = &#39;Work&#39;;&#xA;&#xA;subs = dir(ROOT);&#xA;subs = subs(3:end);&#xA;for i = 1:numel(subs)&#xA;    % for single subject.&#xA;    disp(subs(i).name);&#xA;    sub_path = fullfile(ROOT, subs(i).name);&#xA;    &#xA;    t1_path = fullfile(sub_path, &#39;t1.nii&#39;);&#xA;    if ~exist(t1_path, &#39;file&#39;)&#xA;        % gunzip the .gz file.&#xA;        gunzip(fullfile(sub_path, &#39;t1.nii.gz&#39;));&#xA;    end&#xA;    flair_path = fullfile(sub_path, &#39;flair.nii&#39;);&#xA;    if ~exist(flair_path, &#39;file&#39;)&#xA;        gunzip(fullfile(sub_path, &#39;flair.nii.gz&#39;));&#xA;    end&#xA;    &#xA;    pause(10);&#xA;    &#xA;    spm_jobman(&#39;initcfg&#39;);&#xA;    matlabbatch{1}.spm.tools.LST.lpa.data_F2 = {strcat(flair_path, &#39;,1&#39;)};&#xA;    matlabbatch{1}.spm.tools.LST.lpa.data_coreg = {strcat(t1_path, &#39;,1&#39;)};&#xA;    matlabbatch{1}.spm.tools.LST.lpa.html_report = 1;&#xA;    spm(&#39;defaults&#39;, &#39;pet&#39;);&#xA;    spm_jobman(&#39;run&#39;, matlabbatch);&#xA;    clear matlabbatch;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;lga&#34;&gt;LGA&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;% WMH segment by LGA in LST.&#xA;close all; clear; clc;&#xA;&#xA;% Set SPM12 into Path.&#xA;SPM_PATH = &#39;/home/babri3/Tools/spm12&#39;;&#xA;addpath(SPM_PATH)&#xA;&#xA;% Set root path.&#xA;ROOT = &#39;Work&#39;;&#xA;&#xA;&#xA;subs = dir(ROOT);&#xA;subs = subs(3:end);&#xA;for i = 1:numel(subs)&#xA;    % for single subject.&#xA;    disp(subs(i).name);&#xA;    sub_path = fullfile(ROOT, subs(i).name);&#xA;    &#xA;    t1_path = fullfile(sub_path, &#39;t1.nii&#39;);&#xA;    if ~exist(t1_path, &#39;file&#39;)&#xA;        % gunzip the .gz &#xA;        gunzip(fullfile(sub_path, &#39;t1.nii.gz&#39;));&#xA;    end&#xA;    flair_path = fullfile(sub_path, &#39;flair.nii&#39;);&#xA;    if ~exist(flair_path, &#39;file&#39;)&#xA;        gunzip(fullfile(sub_path, &#39;flair.nii.gz&#39;));&#xA;    end&#xA;    pause(10);&#xA;    disp(t1_path);&#xA;    disp(flair_path);&#xA;    spm_jobman(&#39;initcfg&#39;);&#xA;   %-----------------------------------------------------------------------&#xA;    % Job saved on 29-Sep-2020 18:30:58 by cfg_util (rev $Rev: 6942 $)&#xA;    % spm SPM - SPM12 (7219)&#xA;    % cfg_basicio BasicIO - Unknown&#xA;    %-----------------------------------------------------------------------&#xA;    matlabbatch{1}.spm.tools.LST.lga.data_T1 = {strcat(t1_path, &#39;,1&#39;)};&#xA;    matlabbatch{1}.spm.tools.LST.lga.data_F2 = {strcat(flair_path, &#39;,1&#39;)};&#xA;    matlabbatch{1}.spm.tools.LST.lga.opts_lga.initial = 0.3;&#xA;    matlabbatch{1}.spm.tools.LST.lga.opts_lga.mrf = 1;&#xA;    matlabbatch{1}.spm.tools.LST.lga.opts_lga.maxiter = 50;&#xA;    matlabbatch{1}.spm.tools.LST.lga.html_report = 1;&#xA;    spm(&#39;defaults&#39;,&#39;pet&#39;);&#xA;    spm_jobman(&#39;run&#39;, matlabbatch);&#xA;    clear matlabbatch;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;bianca&#34;&gt;BIANCA&lt;/h2&gt;&#xA;&lt;p&gt;BIANCA (&lt;a href=&#34;https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/BIANCA&#34;&gt;https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/BIANCA&lt;/a&gt;) 是一种基于监督学习的WMH分割工具，是FSL的一个子模块。在使用它之前，需要先得到一部分被试的分割结果作为训练数据。可用其他的自动化分割方法的结果作为训练数据。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
