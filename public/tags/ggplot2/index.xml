<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ggplot2 on Sang Feng | 桑峰</title>
    <link>//localhost:4321/tags/ggplot2/</link>
    <description>Recent content in Ggplot2 on Sang Feng | 桑峰</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Jul 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:4321/tags/ggplot2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>笔记-RMarkdown和ggplot2</title>
      <link>//localhost:4321/post/2022/07/10/blog/</link>
      <pubDate>Sun, 10 Jul 2022 00:00:00 +0000</pubDate>
      <guid>//localhost:4321/post/2022/07/10/blog/</guid>
      <description>&lt;h1 id=&#34;r-markdown图表交叉引用&#34;&gt;R Markdown图表交叉引用&lt;/h1&gt;&#xA;&lt;p&gt;在R Markdown中给图表添加引用是首先需要在文件的输出格式设置为以下三种之一。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;output:&#xA;  # bookdown::word_document2: default&#xA;  bookdown::html_document2: default&#xA;  # bookdown::pdf_document2: default&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;其次在绘制图表时需要添加标签，如下图&lt;a href=&#34;#fig:fig-demo&#34;&gt;1&lt;/a&gt;所示：&lt;/p&gt;&#xA;&lt;div class=&#34;figure&#34;&gt;&#xA;&lt;img src=&#34;./img/demo.png&#34; alt=&#34;这是一个示例。&#34;  /&gt;&#xA;&lt;p class=&#34;caption&#34;&gt;&lt;span id=&#34;fig:fig-demo&#34;&gt;&lt;/span&gt;Figure 1: 这是一个示例。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;其中fig-demo为图片的标签。在文中引用时，输入**&amp;lt;a href=&amp;quot;#fig:fig-demo&amp;quot;&amp;gt;1&lt;/a&gt;**即可自动添加图片引用。&lt;/p&gt;&#xA;&lt;h1 id=&#34;ggplot2添加标签&#34;&gt;ggplot2添加标签&lt;/h1&gt;&#xA;&lt;h2 id=&#34;修改坐标轴端点样式&#34;&gt;修改坐标轴端点样式&lt;/h2&gt;&#xA;&lt;p&gt;坐标轴端点样式可以通过如下命令修改，下图&lt;a href=&#34;#fig:fig-round&#34;&gt;2&lt;/a&gt;、图&lt;a href=&#34;#fig:fig-butt&#34;&gt;3&lt;/a&gt;和图&lt;a href=&#34;#fig:fig-square&#34;&gt;4&lt;/a&gt;分别是三种端点样式的是示例图。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;theme(axis.line = element_line(lineend=&#39;round&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;div class=&#34;figure&#34;&gt;&#xA;&lt;img src=&#34;./img/demo-round.png&#34; alt=&#34;这是round。&#34;  /&gt;&#xA;&lt;p class=&#34;caption&#34;&gt;&lt;span id=&#34;fig:fig-round&#34;&gt;&lt;/span&gt;Figure 2: 这是round。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;figure&#34;&gt;&#xA;&lt;img src=&#34;./img/demo-butt.png&#34; alt=&#34;这是butt。&#34;  /&gt;&#xA;&lt;p class=&#34;caption&#34;&gt;&lt;span id=&#34;fig:fig-butt&#34;&gt;&lt;/span&gt;Figure 3: 这是butt。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;figure&#34;&gt;&#xA;&lt;img src=&#34;./img/demo-square.png&#34; alt=&#34;这是square。&#34;  /&gt;&#xA;&lt;p class=&#34;caption&#34;&gt;&lt;span id=&#34;fig:fig-square&#34;&gt;&lt;/span&gt;Figure 4: 这是square。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2 id=&#34;给柱状图添加标签&#34;&gt;给柱状图添加标签&lt;/h2&gt;&#xA;&lt;p&gt;给柱状图每个柱子添加相应的数字标签可以通过geom_text函数完成，显示效果如图&lt;a href=&#34;#fig:fig-label&#34;&gt;5&lt;/a&gt;所示。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tmpData %&amp;gt;%&#xA;  count(MRIAGE_group, Sex) %&amp;gt;%&#xA;  ggplot(aes(x = MRIAGE_group, y = n, fill = Sex, label = n)) +&#xA;  geom_bar(stat = &#39;identity&#39;, position = position_dodge()) +&#xA;  geom_text(position = position_dodge(width = 0.9), vjust = -0.1) +&#xA;  labs(x = &#39;Age&#39;, y = &#39;Number&#39;) +&#xA;  theme_classic(base_size = 20) +&#xA;  theme(&#xA;    axis.line = element_line(lineend=&#39;round&#39;),&#xA;    axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.6))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;div class=&#34;figure&#34;&gt;&#xA;&lt;img src=&#34;./img/demo-label.png&#34; alt=&#34;柱状图标签。&#34;  /&gt;&#xA;&lt;p class=&#34;caption&#34;&gt;&lt;span id=&#34;fig:fig-label&#34;&gt;&lt;/span&gt;Figure 5: 柱状图标签。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Weekly summary</title>
      <link>//localhost:4321/post/2021/11/19/blog/</link>
      <pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:4321/post/2021/11/19/blog/</guid>
      <description>&lt;h2 id=&#34;自定义colormap&#34;&gt;自定义Colormap&lt;/h2&gt;&#xA;&lt;p&gt;在一些场景下，我们需要自己构造数字与颜色的对应关系。比如，我们在探究每个ROI随龄变化的趋势时，我们需要将回归方程中年龄的系数展示在脑图上。朴素的想法是，我构造一个关于系数与颜色的映射关系，给定某一系数，就返回相应的颜色。实现方法如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;library(tidyverse)&#xA;library(RColorBrewer)&#xA;&#xA;data &amp;lt;- data.frame(Val = rnorm(100)) %&amp;gt;% as_tibble()&#xA;&#xA;# 选择合适的颜色&#xA;colors &amp;lt;- brewer.pal(11, &#39;RdBu&#39;)&#xA;# 考虑到数字的正负号，我们这里用差异较明显的颜色区分正负&#xA;pos.color &amp;lt;- colorRampPalette(colors[6:1])(1000 * round(max(data$Val), 3) + 1)&#xA;neg.color &amp;lt;- colorRampPalette(colors[6:11])(-1000 * round(min(data$Val), 3) + 1)&#xA;&#xA;res &amp;lt;- rep(&#39;&#39;, length(data$Val))&#xA;for (i in 1:length(data$Val)) {&#xA;  if (round(data$Val[i], 3) &amp;lt; 0) {&#xA;    res[i] &amp;lt;- neg.color[1000 * round(-data$Val[i], 3)]&#xA;  } else if (round(data$Val[i], 3) &amp;gt; 0) {&#xA;    res[i] &amp;lt;- pos.color[1000 * round(data$Val[i], 3)]&#xA;  } else {&#xA;    res[i] &amp;lt;- pos.color[1]&#xA;  }&#xA;}&#xA;data[&#39;Color&#39;] &amp;lt;- res&#xA;data[, c(&#39;Red&#39;, &#39;Green&#39;, &#39;Blue&#39;)] &amp;lt;- t(col2rgb(res)) / 255&#xA;&#xA;# 演示颜色&#xA;ggplot(data = data, aes(x = Val, y = Val)) +&#xA;  geom_point(color = data$Color, size = 10)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;其中，data中同一行表示数字与对应的颜色。&lt;/p&gt;</description>
    </item>
    <item>
      <title>一周小结</title>
      <link>//localhost:4321/post/2021/09/03/blog/</link>
      <pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:4321/post/2021/09/03/blog/</guid>
      <description>&lt;h2 id=&#34;python并行处理&#34;&gt;Python并行处理&lt;/h2&gt;&#xA;&lt;p&gt;Python 中的concurrent包提供了对于并行运行的接口，包括进程级并行和线程级并行。下面是一个例子。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor&#xA;&#xA;def func(a, b):&#xA;    return a*b&#xA;&#xA;if __name__ == &#39;__main__&#39;:&#xA;    n_core = 4&#xA;    nums = 10000&#xA;    b = 2&#xA;&#xA;    res = [0 for _ in range(nums)]&#xA;    with ProcessPoolExecutor(n_core) as pool:&#xA;        futures = {pool.submit(func, i, b): i for i in range(1, nums)}&#xA;        for f in futures:&#xA;            res[futures[f]] = f.result()&#xA;    &#xA;    res = [0 for _ in range(nums)]&#xA;    with ThreadPoolExecutor(n_core) as pool:&#xA;        futures = {pool.submit(func, i, b): i for i in range(1, nums)}&#xA;        for f in futures:&#xA;            res[futures[f]] = f.result()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;在并行处理时，写明 &lt;em&gt;&lt;strong&gt;python if &lt;strong&gt;name&lt;/strong&gt; == &amp;lsquo;&lt;strong&gt;main&lt;/strong&gt;&amp;rsquo;&lt;/strong&gt;&lt;/em&gt; 以声明主进程。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
