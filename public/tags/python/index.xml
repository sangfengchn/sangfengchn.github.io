<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Sang Feng | 桑峰</title>
    <link>//localhost:4321/tags/python/</link>
    <description>Recent content in Python on Sang Feng | 桑峰</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Jan 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:4321/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Find clusters in a image</title>
      <link>//localhost:4321/post/2022/01/19/blog/</link>
      <pubDate>Wed, 19 Jan 2022 00:00:00 +0000</pubDate>
      <guid>//localhost:4321/post/2022/01/19/blog/</guid>
      <description>&lt;h1 id=&#34;问题&#34;&gt;问题&lt;/h1&gt;&#xA;&lt;p&gt;我们在对神经影像数据做完统计后（例如ICA），会得到相应的mask二值文件。但是有些情况下，我们还需要进一步对mask中每一个cluster进行分析（例如计算mask中每个cluster之间的功能连接）。所以我们需要从mask文件中得到每一个cluster。由于没有想到有哪个现成的工具包可以解决上述的问题。因此，本文试图用自己的方式去解决上述的问题。&lt;/p&gt;&#xA;&lt;h1 id=&#34;方法&#34;&gt;方法&lt;/h1&gt;&#xA;&lt;h2 id=&#34;思路一&#34;&gt;思路一&lt;/h2&gt;&#xA;&lt;p&gt;看到这个问题的时候，最朴素的想法就是用MRIcron/GL或者ITK-SNAP手动将mask中的每一个cluster标记出来。&lt;/p&gt;&#xA;&lt;h2 id=&#34;思路二&#34;&gt;思路二&lt;/h2&gt;&#xA;&lt;p&gt;虽然上述手动标记的方法能解决这个问题，但是显得没那么优雅（bushi。就想换用代码解决这个问题。而且写完代码下次再碰到类似的问题，就能直接使用了（还能水一篇推送。&lt;/p&gt;&#xA;&lt;p&gt;首先我想着先找出mask中所有非零元素的下标，然后选一个非零元素，再去判断这个元素的邻域是否是0（如果是0就意味着已经到了这个cluster的边缘）。但是在三维图像里面，要判断邻域是否到达边缘，需要写8个条件判断，这也很不优雅（主要还是找到了一个现成的轮子。&lt;/p&gt;&#xA;&lt;p&gt;之后在找“轮子”的时候，看到了scipy包里面的一个函数可以实现上面的过程。因此通过调用它近乎完美地解决了最开始的问题（bushi。下面是相应的代码。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import nibabel as nib&#xA;from scipy.ndimage import measurements&#xA;import logging&#xA;logging.basicConfig(level=logging.INFO)&#xA;&#xA;img = nib.load(&#39;test-binary.nii&#39;)&#xA;data = img.get_fdata()&#xA;labels, num_labels = measurements.label(data)&#xA;logging.info(f&#39;The number of cluster is {num_labels}&#39;)&#xA;nib.save(nib.Nifti1Image(labels, img.affine), f&#39;test_cluster-mix.nii&#39;)&#xA;for i in range(num_labels):&#xA;    tmp_data = np.zeros(data.shape)&#xA;    tmp_data[labels == i + 1] = 1&#xA;    nib.save(nib.Nifti1Image(tmp_data, img.affine), f&#39;test_cluster-{i+1}.nii&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;test-binary.nii是从Neurosynth上随便找的一个功能连接图谱，并以±0.2作为阈值得到的mask文件（Figure 1）。&lt;/p&gt;&#xA;&lt;div class=&#34;figure&#34;&gt;&#xA;&lt;img src=&#34;./img/fig-1.png&#34; alt=&#34;test-binary.nii可视化结果。&#34;  /&gt;&#xA;&lt;p class=&#34;caption&#34;&gt;&lt;span id=&#34;fig:unnamed-chunk-1&#34;&gt;&lt;/span&gt;Figure 1: test-binary.nii可视化结果。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;上述代码运行后，对于mask中的每一个cluster会得到一个.nii文件，同时也会得到一个混合了所有cluster的.nii文件。结果如Figure 2所示。&lt;/p&gt;&#xA;&lt;div class=&#34;figure&#34;&gt;&#xA;&lt;img src=&#34;./img/fig-2.png&#34; alt=&#34;混合了所有cluster的结果，其中每个cluster用一个整数标记。&#34;  /&gt;&#xA;&lt;p class=&#34;caption&#34;&gt;&lt;span id=&#34;fig:unnamed-chunk-2&#34;&gt;&lt;/span&gt;Figure 2: 混合了所有cluster的结果，其中每个cluster用一个整数标记。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://neurosynth.org/locations/-4_24_46_6&#34;&gt;https://neurosynth.org/locations/-4_24_46_6&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/52087533/how-to-find-number-of-clusters-in-a-image/52088840&#34;&gt;https://stackoverflow.com/questions/52087533/how-to-find-number-of-clusters-in-a-image/52088840&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python for Neuroimage data</title>
      <link>//localhost:4321/post/2021/11/20/blog/</link>
      <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:4321/post/2021/11/20/blog/</guid>
      <description>&lt;h1 id=&#34;dicom文件&#34;&gt;DICOM文件&lt;/h1&gt;&#xA;&lt;p&gt;DICOM格式是医学成像设备输出的统一的文件格式，它包含数据头信息和数据信息两部分。其中头信息包含扫描设备的信息以及被试的信息等，另外还包括其他关于数据的元信息。数据部分是扫描设备采集到扫描物体的信号值。&lt;/p&gt;&#xA;&lt;p&gt;利用Pydicom包可以使用Python操作DICOM文件，包括对DICOM文件的读写、头信息的增删改等。&lt;/p&gt;&#xA;&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-{.bash}&#34;&gt;pip install pydicom&#xA;# 或&#xA;conda install -c conda-forge pydicom&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;示例数据&#34;&gt;示例数据&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-{.python}&#34;&gt;from pydicom.data import get_testdata_file&#xA;fpath = get_testdata_file(&amp;quot;CT_small.dcm&amp;quot;)&#xA;fpath&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Out: &amp;lsquo;/Applications/miniconda3/lib/python3.9/site-packages/pydicom/data/test_files/CT_small.dcm&amp;rsquo;&lt;/p&gt;&#xA;&lt;h2 id=&#34;读入文件&#34;&gt;读入文件&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pydicom import dcmread&#xA;ds = dcmread(fpath)&#xA;ds&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;输出：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Dataset.file_meta -------------------------------&#xA;(0002, 0000) File Meta Information Group Length  UL: 192&#xA;(0002, 0001) File Meta Information Version       OB: b&#39;\x00\x01&#39;&#xA;(0002, 0002) Media Storage SOP Class UID         UI: CT Image Storage&#xA;(0002, 0003) Media Storage SOP Instance UID      UI: 1.3.6.1.4.1.5962.1.1.1.1.1.20040119072730.12322&#xA;(0002, 0010) Transfer Syntax UID                 UI: Explicit VR Little Endian&#xA;(0002, 0012) Implementation Class UID            UI: 1.3.6.1.4.1.5962.2&#xA;(0002, 0013) Implementation Version Name         SH: &#39;DCTOOL100&#39;&#xA;(0002, 0016) Source Application Entity Title     AE: &#39;CLUNIE1&#39;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;访问数据的子元素&#34;&gt;访问数据的子元素&lt;/h2&gt;&#xA;&lt;p&gt;可以通过两种方式访问ds中的元素，其一是利用元素的位置，即每个元素中最前面的两个两位十六进制数，如(0x0043, 0x104e)；其二是利用元素的名称访问。下面对三种方式分别进行演示。&lt;/p&gt;</description>
    </item>
    <item>
      <title>一周小结</title>
      <link>//localhost:4321/post/2021/09/03/blog/</link>
      <pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:4321/post/2021/09/03/blog/</guid>
      <description>&lt;h2 id=&#34;python并行处理&#34;&gt;Python并行处理&lt;/h2&gt;&#xA;&lt;p&gt;Python 中的concurrent包提供了对于并行运行的接口，包括进程级并行和线程级并行。下面是一个例子。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor&#xA;&#xA;def func(a, b):&#xA;    return a*b&#xA;&#xA;if __name__ == &#39;__main__&#39;:&#xA;    n_core = 4&#xA;    nums = 10000&#xA;    b = 2&#xA;&#xA;    res = [0 for _ in range(nums)]&#xA;    with ProcessPoolExecutor(n_core) as pool:&#xA;        futures = {pool.submit(func, i, b): i for i in range(1, nums)}&#xA;        for f in futures:&#xA;            res[futures[f]] = f.result()&#xA;    &#xA;    res = [0 for _ in range(nums)]&#xA;    with ThreadPoolExecutor(n_core) as pool:&#xA;        futures = {pool.submit(func, i, b): i for i in range(1, nums)}&#xA;        for f in futures:&#xA;            res[futures[f]] = f.result()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;在并行处理时，写明 &lt;em&gt;&lt;strong&gt;python if &lt;strong&gt;name&lt;/strong&gt; == &amp;lsquo;&lt;strong&gt;main&lt;/strong&gt;&amp;rsquo;&lt;/strong&gt;&lt;/em&gt; 以声明主进程。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python函数参数中的“*”</title>
      <link>//localhost:4321/post/2021/06/17/blog/</link>
      <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:4321/post/2021/06/17/blog/</guid>
      <description>&lt;p&gt;Python中，*除了可用于乘法和乘方运算外，还可以把它放在函数形式参数的前面，用来传递多个参数或进行参数的拆解。下面简单介绍后者的用法。&lt;/p&gt;&#xA;&lt;h1 id=&#34;传递多参数&#34;&gt;传递多参数&lt;/h1&gt;&#xA;&lt;h3 id=&#34;demo1&#34;&gt;示例1&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def f(*x):&#xA;    print(x)&#xA;&#xA;f(1, 2, 3, 4)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;输出：(1, 2, 3, 4)&lt;/p&gt;&#xA;&lt;p&gt;可见，虽然在定义函数**f()**时，只用了一个形式参数x，但是由于*的存在，再调用该函数时，即便是传递多个参数，也会把多个参数当成一个变量x（这里当作元组处理）来处理。&lt;/p&gt;&#xA;&lt;h3 id=&#34;demo2&#34;&gt;示例2&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def f(**x):&#xA;    print(x)&#xA;    &#xA;f(a=1, b=2, c=3, d=4)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;输出：{&amp;lsquo;a&amp;rsquo;: 1, &amp;lsquo;b&amp;rsquo;: 2, &amp;lsquo;c&amp;rsquo;: 3, &amp;rsquo;d&amp;rsquo;: 4}&lt;/p&gt;&#xA;&lt;p&gt;**也可以接收多个参数，但是跟*不同的是，**接收带有key的参数，并且将多个key-value形式的参数转换成为一个字典。&lt;/p&gt;&#xA;&lt;h1 id=&#34;demo3&#34;&gt;拆分参数&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def f(*x):&#xA;    print(x)&#xA;&#xA;# Test 1&#xA;f(1, 2)&#xA;# Test 2&#xA;f((1, 2))&#xA;# Test 3&#xA;f(*(1, 2))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;三次调用的输出分别为：&lt;/p&gt;&#xA;&lt;p&gt;Test 1: (1, 2)&#xA;Test 2: ((1, 2),)&#xA;Test 3: (1, 2)&lt;/p&gt;&#xA;&lt;p&gt;Test 1的结果跟{#demo1}一样，此时的x为两个参数构成的元组。Test 2输入参数变成了一个由两个元素构成的元组，此时的x把这个元组当成一个整体作为它的第一个元素，形成了一个新的元组。Test 3在传递参数时，前面添加了*，此时函数f中的x为输入的元组本身，效果与Test 1相同。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
